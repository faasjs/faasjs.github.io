import{_ as o,c as p,b as c,a as l,d as e,e as a,w as t,r as i,o as r}from"./app-Da9LvgXD.js";const d={};function u(h,n){const s=i("RouteLink");return r(),p("div",null,[c("p",null,[e(s,{to:"/doc/func/"},{default:t(()=>n[0]||(n[0]=[a("Documents")])),_:1,__:[0]}),n[2]||(n[2]=a(" / ")),e(s,{to:"/doc/func/"},{default:t(()=>n[1]||(n[1]=[a("@faasjs/func")])),_:1,__:[1]}),n[3]||(n[3]=a(" / nameFunc"))]),n[4]||(n[4]=l(`<h1 id="function-namefunc" tabindex="-1"><a class="header-anchor" href="#function-namefunc"><span>Function: nameFunc()</span></a></h1><blockquote><p><strong>nameFunc</strong>&lt;<code>T</code>&gt;(<code>name</code>, <code>handler</code>): <code>T</code></p></blockquote><p>Assigns a name to a given function handler, which will be displayed in logs and error messages.</p><h2 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters"><span>Type Parameters</span></a></h2><h3 id="t" tabindex="-1"><a class="header-anchor" href="#t"><span>T</span></a></h3><p><code>T</code> <em>extends</em> (...<code>args</code>) =&gt; <code>any</code></p><p>The type of the function handler.</p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h2><h3 id="name" tabindex="-1"><a class="header-anchor" href="#name"><span>name</span></a></h3><p><code>string</code></p><p>The name to assign to the function handler.</p><h3 id="handler" tabindex="-1"><a class="header-anchor" href="#handler"><span>handler</span></a></h3><p><code>T</code></p><p>The function handler to which the name will be assigned.</p><h2 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h2><p><code>T</code></p><ul><li>The original function handler with the assigned name.</li></ul><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h2><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> nameFunc <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@faasjs/func&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token function">nameFunc</span><span class="token punctuation">(</span><span class="token string">&#39;myHandler&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">return</span> <span class="token string">&#39;Hello World&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>handler<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// =&gt; &#39;myHandler&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19))])}const f=o(d,[["render",u]]),k=JSON.parse('{"path":"/doc/func/functions/nameFunc.html","title":"Function: nameFunc()","lang":"en","frontmatter":{},"git":{},"filePathRelative":"doc/func/functions/nameFunc.md"}');export{f as comp,k as data};
