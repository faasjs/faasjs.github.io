import{_ as o,c as p,b as r,d as e,e as t,f as a,a as c,r as l,o as i}from"./app-DcwA8ltj.js";const d={};function u(h,n){const s=l("RouteLink");return i(),p("div",null,[r("p",null,[e(s,{to:"/doc/server/"},{default:t(()=>n[0]||(n[0]=[a("Documents")])),_:1}),n[2]||(n[2]=a(" / ")),e(s,{to:"/doc/server/"},{default:t(()=>n[1]||(n[1]=[a("@faasjs/server")])),_:1}),n[3]||(n[3]=a(" / ServerOptions"))]),n[4]||(n[4]=c(`<h1 id="type-alias-serveroptions" tabindex="-1"><a class="header-anchor" href="#type-alias-serveroptions"><span>Type Alias: ServerOptions</span></a></h1><blockquote><p><strong>ServerOptions</strong>: <code>object</code></p></blockquote><p>Options for configuring the server.</p><h2 id="type-declaration" tabindex="-1"><a class="header-anchor" href="#type-declaration"><span>Type declaration</span></a></h2><h3 id="onclose" tabindex="-1"><a class="header-anchor" href="#onclose"><span>onClose()?</span></a></h3><blockquote><p><code>optional</code> <strong>onClose</strong>: (<code>context</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;</p></blockquote><p>Callback function that is called when the server is closed.</p><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h4><h5 id="context" tabindex="-1"><a class="header-anchor" href="#context"><span>context</span></a></h5><p>The context object containing the logger.</p><h6 id="logger" tabindex="-1"><a class="header-anchor" href="#logger"><span>logger</span></a></h6><p><code>Logger</code></p><h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function-variable function">onClose</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> logger <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Server closed&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="onerror" tabindex="-1"><a class="header-anchor" href="#onerror"><span>onError()?</span></a></h3><blockquote><p><code>optional</code> <strong>onError</strong>: (<code>error</code>, <code>context</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;</p></blockquote><p>Callback function that is called when an error occurs.</p><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1"><span>Parameters</span></a></h4><h5 id="error" tabindex="-1"><a class="header-anchor" href="#error"><span>error</span></a></h5><p><code>Error</code></p><p>The error that occurred.</p><h5 id="context-1" tabindex="-1"><a class="header-anchor" href="#context-1"><span>context</span></a></h5><p>The context object containing the logger.</p><h6 id="logger-1" tabindex="-1"><a class="header-anchor" href="#logger-1"><span>logger</span></a></h6><p><code>Logger</code></p><h4 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1"><span>Returns</span></a></h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1"><span>Example</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function-variable function">onError</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> <span class="token punctuation">{</span> logger <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="onstart" tabindex="-1"><a class="header-anchor" href="#onstart"><span>onStart()?</span></a></h3><blockquote><p><code>optional</code> <strong>onStart</strong>: (<code>context</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;</p></blockquote><p>Callback function that is called when the server starts.</p><p>Note: It will not break the server if an error occurs.</p><h4 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2"><span>Parameters</span></a></h4><h5 id="context-2" tabindex="-1"><a class="header-anchor" href="#context-2"><span>context</span></a></h5><p>The context object containing the logger.</p><h6 id="logger-2" tabindex="-1"><a class="header-anchor" href="#logger-2"><span>logger</span></a></h6><p><code>Logger</code></p><h4 id="returns-2" tabindex="-1"><a class="header-anchor" href="#returns-2"><span>Returns</span></a></h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="example-2" tabindex="-1"><a class="header-anchor" href="#example-2"><span>Example</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function-variable function">onStart</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> logger <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Server started&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="port" tabindex="-1"><a class="header-anchor" href="#port"><span>port?</span></a></h3><blockquote><p><code>optional</code> <strong>port</strong>: <code>number</code></p></blockquote><p>The port on which the server will listen.</p><h4 id="default" tabindex="-1"><a class="header-anchor" href="#default"><span>Default</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token number">3000</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,49))])}const g=o(d,[["render",u],["__file","ServerOptions.html.vue"]]),v=JSON.parse('{"path":"/doc/server/type-aliases/ServerOptions.html","title":"Type Alias: ServerOptions","lang":"en","frontmatter":{},"headers":[{"level":2,"title":"Type declaration","slug":"type-declaration","link":"#type-declaration","children":[{"level":3,"title":"onClose()?","slug":"onclose","link":"#onclose","children":[]},{"level":3,"title":"onError()?","slug":"onerror","link":"#onerror","children":[]},{"level":3,"title":"onStart()?","slug":"onstart","link":"#onstart","children":[]},{"level":3,"title":"port?","slug":"port","link":"#port","children":[]}]}],"git":{},"filePathRelative":"doc/server/type-aliases/ServerOptions.md"}');export{g as comp,v as data};
