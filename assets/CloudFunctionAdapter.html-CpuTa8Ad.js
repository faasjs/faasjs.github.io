import{_ as a,r as c,o as d,c as s,a as r,d as n,w as t,b as e,e as i}from"./app-BVwqfVmp.js";const l={},p=i('<h1 id="type-alias-cloudfunctionadapter" tabindex="-1"><a class="header-anchor" href="#type-alias-cloudfunctionadapter"><span>Type alias: CloudFunctionAdapter</span></a></h1><blockquote><p><strong>CloudFunctionAdapter</strong>: <code>Object</code></p></blockquote><h2 id="type-declaration" tabindex="-1"><a class="header-anchor" href="#type-declaration"><span>Type declaration</span></a></h2><h3 id="invokecloudfunction" tabindex="-1"><a class="header-anchor" href="#invokecloudfunction"><span>invokeCloudFunction</span></a></h3><blockquote><p><strong>invokeCloudFunction</strong>: (<code>name</code>, <code>data</code>, <code>options</code>?) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;</p></blockquote><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h4><p>• <strong>name</strong>: <code>string</code></p><p>• <strong>data</strong>: <code>any</code></p><p>• <strong>options?</strong>: <code>any</code></p><h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h3 id="invokesynccloudfunction" tabindex="-1"><a class="header-anchor" href="#invokesynccloudfunction"><span>invokeSyncCloudFunction</span></a></h3><blockquote><p><strong>invokeSyncCloudFunction</strong>: &lt;<code>TResult</code>&gt;(<code>name</code>, <code>data</code>, <code>options</code>?) =&gt; <code>Promise</code>&lt;<code>TResult</code>&gt;</p></blockquote><h4 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters"><span>Type parameters</span></a></h4><p>• <strong>TResult</strong></p><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1"><span>Parameters</span></a></h4><p>• <strong>name</strong>: <code>string</code></p><p>• <strong>data</strong>: <code>any</code></p><p>• <strong>options?</strong>: <code>any</code></p><h4 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1"><span>Returns</span></a></h4><p><code>Promise</code>&lt;<code>TResult</code>&gt;</p>',21);function u(h,f){const o=c("RouteLink");return d(),s("div",null,[r("p",null,[n(o,{to:"/doc/cloud_function/"},{default:t(()=>[e("Documents")]),_:1}),e(" / "),n(o,{to:"/doc/cloud_function/"},{default:t(()=>[e("@faasjs/cloud_function")]),_:1}),e(" / CloudFunctionAdapter")]),p])}const m=a(l,[["render",u],["__file","CloudFunctionAdapter.html.vue"]]),k=JSON.parse('{"path":"/doc/cloud_function/type-aliases/CloudFunctionAdapter.html","title":"Type alias: CloudFunctionAdapter","lang":"en","frontmatter":{},"headers":[{"level":2,"title":"Type declaration","slug":"type-declaration","link":"#type-declaration","children":[{"level":3,"title":"invokeCloudFunction","slug":"invokecloudfunction","link":"#invokecloudfunction","children":[]},{"level":3,"title":"invokeSyncCloudFunction","slug":"invokesynccloudfunction","link":"#invokesynccloudfunction","children":[]}]}],"git":{"updatedTime":null},"filePathRelative":"doc/cloud_function/type-aliases/CloudFunctionAdapter.md"}');export{m as comp,k as data};
