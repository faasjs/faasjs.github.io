import{_ as l,c as r,b as s,d as t,e as o,f as e,a as p,r as i,o as c}from"./app-BRUPUmbl.js";const d={};function u(h,a){const n=i("RouteLink");return c(),r("div",null,[s("p",null,[t(n,{to:"/doc/react/"},{default:o(()=>a[0]||(a[0]=[e("Documents")])),_:1}),a[2]||(a[2]=e(" / ")),t(n,{to:"/doc/react/"},{default:o(()=>a[1]||(a[1]=[e("@faasjs/react")])),_:1}),a[3]||(a[3]=e(" / FormRule"))]),a[5]||(a[5]=p('<h1 id="type-alias-formrule-options" tabindex="-1"><a class="header-anchor" href="#type-alias-formrule-options"><span>Type Alias: FormRule()&lt;Options&gt;</span></a></h1><blockquote><p><strong>FormRule</strong>&lt;<code>Options</code>&gt;: (<code>value</code>, <code>options</code>?, <code>lang</code>?) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;</p></blockquote><p>A type representing a form validation rule.</p><h2 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters"><span>Type Parameters</span></a></h2><p>â€¢ <strong>Options</strong> = <code>any</code></p><p>The type of the options that can be passed to the rule.</p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h2><h3 id="value" tabindex="-1"><a class="header-anchor" href="#value"><span>value</span></a></h3><p><code>any</code></p><p>The value to be validated.</p><h3 id="options" tabindex="-1"><a class="header-anchor" href="#options"><span>options?</span></a></h3><p><code>Options</code></p><p>Optional. Additional options that can be used in the validation.</p><h3 id="lang" tabindex="-1"><a class="header-anchor" href="#lang"><span>lang?</span></a></h3>',14)),s("p",null,[t(n,{to:"/doc/react/type-aliases/FormLang.html"},{default:o(()=>a[4]||(a[4]=[s("code",null,"FormLang",-1)])),_:1})]),a[6]||(a[6]=p(`<p>Optional. The language settings that can be used in the validation.</p><h2 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h2><p><code>Promise</code>&lt;<code>void</code>&gt;</p><p>A promise that resolves if the validation is successful, or rejects with an error if the validation fails.</p><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h2><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">required</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> options<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> lang<span class="token operator">?</span><span class="token operator">:</span> FormLang<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> value <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> value <span class="token operator">===</span> <span class="token string">&#39;&#39;</span> <span class="token operator">||</span> Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span>lang<span class="token operator">?.</span>required<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6))])}const k=l(d,[["render",u],["__file","FormRule.html.vue"]]),v=JSON.parse('{"path":"/doc/react/type-aliases/FormRule.html","title":"Type Alias: FormRule()<Options>","lang":"en","frontmatter":{},"headers":[{"level":2,"title":"Type Parameters","slug":"type-parameters","link":"#type-parameters","children":[]},{"level":2,"title":"Parameters","slug":"parameters","link":"#parameters","children":[{"level":3,"title":"value","slug":"value","link":"#value","children":[]},{"level":3,"title":"options?","slug":"options","link":"#options","children":[]},{"level":3,"title":"lang?","slug":"lang","link":"#lang","children":[]}]},{"level":2,"title":"Returns","slug":"returns","link":"#returns","children":[]},{"level":2,"title":"Example","slug":"example","link":"#example","children":[]}],"git":{},"filePathRelative":"doc/react/type-aliases/FormRule.md"}');export{k as comp,v as data};
