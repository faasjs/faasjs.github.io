import{_ as p,c as l,b as o,a as c,d as t,e as n,w as e,r as i,o as u}from"./app-B4hOYmml.js";const r={};function d(k,a){const s=i("RouteLink");return u(),l("div",null,[o("p",null,[t(s,{to:"/doc/react/"},{default:e(()=>a[0]||(a[0]=[n("Documents")])),_:1}),a[2]||(a[2]=n(" / ")),t(s,{to:"/doc/react/"},{default:e(()=>a[1]||(a[1]=[n("@faasjs/react")])),_:1}),a[3]||(a[3]=n(" / useStateRef"))]),a[4]||(a[4]=c(`<h1 id="function-usestateref" tabindex="-1"><a class="header-anchor" href="#function-usestateref"><span>Function: useStateRef()</span></a></h1><blockquote><p><strong>useStateRef</strong>&lt;<code>T</code>&gt;(<code>initialValue</code>?): [<code>T</code>, <code>Dispatch</code>&lt;<code>SetStateAction</code>&lt;<code>T</code>&gt;&gt;, <code>RefObject</code>&lt;<code>T</code>&gt;]</p></blockquote><p>Custom hook that returns a stateful value and a ref to that value.</p><h2 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters"><span>Type Parameters</span></a></h2><h3 id="t" tabindex="-1"><a class="header-anchor" href="#t"><span>T</span></a></h3><p><code>T</code> = <code>any</code></p><p>The type of the value.</p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h2><h3 id="initialvalue" tabindex="-1"><a class="header-anchor" href="#initialvalue"><span>initialValue?</span></a></h3><p><code>T</code></p><p>The initial value of the state.</p><h2 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h2><p>[<code>T</code>, <code>Dispatch</code>&lt;<code>SetStateAction</code>&lt;<code>T</code>&gt;&gt;, <code>RefObject</code>&lt;<code>T</code>&gt;]</p><ul><li>The stateful value, a function to set the value, and a ref to the value.</li></ul><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h2><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useStateRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@faasjs/react&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">,</span> ref<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useStateRef</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Value: </span><span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setValue</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Increment</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ref<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Submit</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16))])}const v=p(r,[["render",d]]),h=JSON.parse('{"path":"/doc/react/functions/useStateRef.html","title":"Function: useStateRef()","lang":"en","frontmatter":{},"headers":[{"level":2,"title":"Type Parameters","slug":"type-parameters","link":"#type-parameters","children":[{"level":3,"title":"T","slug":"t","link":"#t","children":[]}]},{"level":2,"title":"Parameters","slug":"parameters","link":"#parameters","children":[{"level":3,"title":"initialValue?","slug":"initialvalue","link":"#initialvalue","children":[]}]},{"level":2,"title":"Returns","slug":"returns","link":"#returns","children":[]},{"level":2,"title":"Example","slug":"example","link":"#example","children":[]}],"git":{},"filePathRelative":"doc/react/functions/useStateRef.md"}');export{v as comp,h as data};
