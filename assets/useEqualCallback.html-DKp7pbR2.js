import{_ as c,c as o,b as d,a as l,d as s,e as a,w as t,r,o as p}from"./app-Da9LvgXD.js";const u={};function i(h,e){const n=r("RouteLink");return p(),o("div",null,[d("p",null,[s(n,{to:"/doc/react/"},{default:t(()=>e[0]||(e[0]=[a("Documents")])),_:1,__:[0]}),e[2]||(e[2]=a(" / ")),s(n,{to:"/doc/react/"},{default:t(()=>e[1]||(e[1]=[a("@faasjs/react")])),_:1,__:[1]}),e[3]||(e[3]=a(" / useEqualCallback"))]),e[4]||(e[4]=l('<h1 id="function-useequalcallback" tabindex="-1"><a class="header-anchor" href="#function-useequalcallback"><span>Function: useEqualCallback()</span></a></h1><blockquote><p><strong>useEqualCallback</strong>&lt;<code>T</code>&gt;(<code>callback</code>, <code>dependencies</code>): <code>T</code></p></blockquote><p>Custom hook that works like <code>useCallback</code> but uses deep comparison on dependencies.</p><h2 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters"><span>Type Parameters</span></a></h2><h3 id="t" tabindex="-1"><a class="header-anchor" href="#t"><span>T</span></a></h3><p><code>T</code> <em>extends</em> (...<code>args</code>) =&gt; <code>any</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h2><h3 id="callback" tabindex="-1"><a class="header-anchor" href="#callback"><span>callback</span></a></h3><p><code>T</code></p><p>The callback function to run.</p><h3 id="dependencies" tabindex="-1"><a class="header-anchor" href="#dependencies"><span>dependencies</span></a></h3><p><code>any</code>[]</p><p>The list of dependencies.</p><h2 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h2><p><code>T</code></p><p>The result of the <code>useCallback</code> hook with memoized dependencies.</p>',16))])}const k=c(u,[["render",i]]),f=JSON.parse('{"path":"/doc/react/functions/useEqualCallback.html","title":"Function: useEqualCallback()","lang":"en","frontmatter":{},"git":{},"filePathRelative":"doc/react/functions/useEqualCallback.md"}');export{k as comp,f as data};
