import{_ as a,o as e,c as s,e as n}from"./app-ogmZakh0.js";const p={},t=n(`<h1 id="faasjs-更新-新官网、与-nuxt-集成全栈框架、本地模拟服务器-and-more" tabindex="-1"><a class="header-anchor" href="#faasjs-更新-新官网、与-nuxt-集成全栈框架、本地模拟服务器-and-more"><span>FaasJS 更新：新官网、与 Nuxt 集成全栈框架、本地模拟服务器 and more</span></a></h1><p><em>发布于 2019-06-29</em></p><h2 id="新官网" tabindex="-1"><a class="header-anchor" href="#新官网"><span>新官网</span></a></h2><p>https://faasjs.com</p><p>新官网里包括一个快速上手指南以及框架配置和官方插件使用指南。</p><h2 id="与-nuxt-集成全栈框架" tabindex="-1"><a class="header-anchor" href="#与-nuxt-集成全栈框架"><span>与 Nuxt 集成全栈框架</span></a></h2><p>FaasJS 本身是一个基于 Serverless 的后端开发框架，但实际开发场景中，我们更多的情况是与各种前端进行交互，因此我选了 Vue 生态中个人觉得最好用的前端框架 Nuxt 来集成，从而可以以 前端 Nuxt + 后端 FaasJS 的结构组成一个简单易用的全栈开发框架。</p><p>开发者在 Nuxt 中，只需简单的以 this.$faas(云函数名, 参数) 即可在本地模拟调用云函数。</p><h2 id="本地模拟服务器" tabindex="-1"><a class="header-anchor" href="#本地模拟服务器"><span>本地模拟服务器</span></a></h2><p>除了与 Nuxt 集成外，我们也会需要开发小程序等非 Web 的前端项目。这时候可以使用本地模拟服务器，通过简单的命令行：</p><pre><code>yarn server
</code></pre><p>来启动本地模拟服务器，与其它非 Web 的前端框架协作，比如 uni-app、wepy、App 端等。</p><h2 id="and-more" tabindex="-1"><a class="header-anchor" href="#and-more"><span>And more</span></a></h2><p>更多内容及细节欢迎移步官网浏览：https://faasjs.com。</p><p>有任何问题欢迎留言交流或在 Github 上提 Issue。</p>`,15),r=[t];function h(c,o){return e(),s("div",null,r)}const i=a(p,[["render",h],["__file","2019-06-29.html.vue"]]);export{i as default};
