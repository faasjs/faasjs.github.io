import{_ as r,r as n,o as s,c,a as d,d as o,w as a,b as e,e as l}from"./app-BVwqfVmp.js";const i={},p=l('<h1 id="type-alias-validatoroptions-content" tabindex="-1"><a class="header-anchor" href="#type-alias-validatoroptions-content"><span>Type alias: ValidatorOptions&lt;Content&gt;</span></a></h1><blockquote><p><strong>ValidatorOptions</strong>&lt;<code>Content</code>&gt;: <code>Object</code></p></blockquote><h2 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters"><span>Type parameters</span></a></h2><p>• <strong>Content</strong> = <code>Record</code>&lt;<code>string</code>, <code>any</code>&gt;</p><h2 id="type-declaration" tabindex="-1"><a class="header-anchor" href="#type-declaration"><span>Type declaration</span></a></h2><h3 id="onerror" tabindex="-1"><a class="header-anchor" href="#onerror"><span>onError?</span></a></h3><blockquote><p><strong><code>optional</code></strong> <strong>onError</strong>: (<code>type</code>, <code>key</code>, <code>value</code>?) =&gt; <code>Object</code> | <code>void</code></p></blockquote><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h4><p>• <strong>type</strong>: <code>string</code></p><p>• <strong>key</strong>: <code>string</code> | <code>string</code>[]</p><p>• <strong>value?</strong>: <code>any</code></p><h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h4><p><code>Object</code> | <code>void</code></p><h3 id="rules" tabindex="-1"><a class="header-anchor" href="#rules"><span>rules</span></a></h3><blockquote><p><strong>rules</strong>: <code>{ [k in keyof Content]?: ValidatorRuleOptions }</code></p></blockquote><h3 id="whitelist" tabindex="-1"><a class="header-anchor" href="#whitelist"><span>whitelist?</span></a></h3><blockquote><p><strong><code>optional</code></strong> <strong>whitelist</strong>: <code>&quot;error&quot;</code> | <code>&quot;ignore&quot;</code></p></blockquote>',17);function h(u,g){const t=n("RouteLink");return s(),c("div",null,[d("p",null,[o(t,{to:"/doc/http/"},{default:a(()=>[e("Documents")]),_:1}),e(" / "),o(t,{to:"/doc/http/"},{default:a(()=>[e("@faasjs/http")]),_:1}),e(" / ValidatorOptions")]),p])}const m=r(i,[["render",h],["__file","ValidatorOptions.html.vue"]]),k=JSON.parse('{"path":"/doc/http/type-aliases/ValidatorOptions.html","title":"Type alias: ValidatorOptions<Content>","lang":"en","frontmatter":{},"headers":[{"level":2,"title":"Type parameters","slug":"type-parameters","link":"#type-parameters","children":[]},{"level":2,"title":"Type declaration","slug":"type-declaration","link":"#type-declaration","children":[{"level":3,"title":"onError?","slug":"onerror","link":"#onerror","children":[]},{"level":3,"title":"rules","slug":"rules","link":"#rules","children":[]},{"level":3,"title":"whitelist?","slug":"whitelist","link":"#whitelist","children":[]}]}],"git":{"updatedTime":null},"filePathRelative":"doc/http/type-aliases/ValidatorOptions.md"}');export{m as comp,k as data};
