import{_ as s,c,b as d,a as r,d as t,e as a,w as n,r as p,o as l}from"./app-AY6MtJTB.js";const u={};function i(h,e){const o=p("RouteLink");return l(),c("div",null,[d("p",null,[t(o,{to:"/doc/react/"},{default:n(()=>[...e[0]||(e[0]=[a("Documents",-1)])]),_:1}),e[2]||(e[2]=a(" / ",-1)),t(o,{to:"/doc/react/"},{default:n(()=>[...e[1]||(e[1]=[a("@faasjs/react",-1)])]),_:1}),e[3]||(e[3]=a(" / useEqualMemo",-1))]),e[4]||(e[4]=r('<h1 id="function-useequalmemo" tabindex="-1"><a class="header-anchor" href="#function-useequalmemo"><span>Function: useEqualMemo()</span></a></h1><blockquote><p><strong>useEqualMemo</strong>&lt;<code>T</code>&gt;(<code>callback</code>, <code>dependencies</code>): <code>T</code></p></blockquote><p>Custom hook that works like <code>useMemo</code> but uses deep comparison on dependencies.</p><h2 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters"><span>Type Parameters</span></a></h2><h3 id="t" tabindex="-1"><a class="header-anchor" href="#t"><span>T</span></a></h3><p><code>T</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h2><h3 id="callback" tabindex="-1"><a class="header-anchor" href="#callback"><span>callback</span></a></h3><p>() =&gt; <code>T</code></p><p>The callback function to run.</p><h3 id="dependencies" tabindex="-1"><a class="header-anchor" href="#dependencies"><span>dependencies</span></a></h3><p><code>any</code>[]</p><p>The list of dependencies.</p><h2 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h2><p><code>T</code></p><p>The result of the <code>useMemo</code> hook with memoized dependencies.</p>',16))])}const f=s(u,[["render",i]]),b=JSON.parse('{"path":"/doc/react/functions/useEqualMemo.html","title":"Function: useEqualMemo()","lang":"en","frontmatter":{},"git":{},"filePathRelative":"doc/react/functions/useEqualMemo.md"}');export{f as comp,b as data};
