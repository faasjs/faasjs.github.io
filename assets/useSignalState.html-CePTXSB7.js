import{_ as o,r as l,c,b as s,d as e,w as p,e as a,a as i,o as u}from"./app-VWeHP0Pl.js";const r={};function d(k,n){const t=l("RouteLink");return u(),c("div",null,[s("p",null,[e(t,{to:"/doc/react/"},{default:p(()=>n[0]||(n[0]=[a("Documents")])),_:1}),n[2]||(n[2]=a(" / ")),e(t,{to:"/doc/react/"},{default:p(()=>n[1]||(n[1]=[a("@faasjs/react")])),_:1}),n[3]||(n[3]=a(" / useSignalState"))]),n[10]||(n[10]=i(`<h1 id="function-usesignalstate" tabindex="-1"><a class="header-anchor" href="#function-usesignalstate"><span>Function: useSignalState()</span></a></h1><blockquote><p><strong>useSignalState</strong>&lt;<code>T</code>&gt;(<code>initialValue</code>, <code>options</code>): readonly [<code>T</code>, (<code>changes</code>) =&gt; <code>void</code>]</p></blockquote><p>Create a <a href="https://preactjs.com/guide/v10/signals" target="_blank" rel="noopener noreferrer">signal</a> like useState.</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useSignalState<span class="token punctuation">,</span> useSignalEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@faasjs/react&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">App</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useSignalState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> debugName<span class="token operator">:</span> <span class="token string">&#39;count&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useSignalEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">+</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters"><span>Type parameters</span></a></h2><p>• <strong>T</strong> = <code>any</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h2><p>• <strong>initialValue</strong>: <code>T</code></p>`,8)),s("p",null,[n[5]||(n[5]=a("• ")),n[6]||(n[6]=s("strong",null,"options",-1)),n[7]||(n[7]=a(": ")),e(t,{to:"/doc/react/type-aliases/SignalOptions.html"},{default:p(()=>n[4]||(n[4]=[s("code",null,"SignalOptions",-1)])),_:1}),n[8]||(n[8]=a("= ")),n[9]||(n[9]=s("code",null,"{}",-1))]),n[11]||(n[11]=s("h2",{id:"returns",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#returns"},[s("span",null,"Returns")])],-1)),n[12]||(n[12]=s("p",null,[a("readonly ["),s("code",null,"T"),a(", ("),s("code",null,"changes"),a(") => "),s("code",null,"void"),a("]")],-1))])}const m=o(r,[["render",d],["__file","useSignalState.html.vue"]]),v=JSON.parse('{"path":"/doc/react/functions/useSignalState.html","title":"Function: useSignalState()","lang":"en","frontmatter":{},"headers":[{"level":2,"title":"Type parameters","slug":"type-parameters","link":"#type-parameters","children":[]},{"level":2,"title":"Parameters","slug":"parameters","link":"#parameters","children":[]},{"level":2,"title":"Returns","slug":"returns","link":"#returns","children":[]}],"git":{"updatedTime":null},"filePathRelative":"doc/react/functions/useSignalState.md"}');export{m as comp,v as data};
