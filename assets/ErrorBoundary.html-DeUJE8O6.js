import{_ as t,c,b as o,a as s,d as n,e as r,w as a,r as p,o as i}from"./app-Da9LvgXD.js";const l={};function h(u,e){const d=p("RouteLink");return i(),c("div",null,[o("p",null,[n(d,{to:"/doc/react/"},{default:a(()=>e[0]||(e[0]=[r("Documents")])),_:1,__:[0]}),e[2]||(e[2]=r(" / ")),n(d,{to:"/doc/react/"},{default:a(()=>e[1]||(e[1]=[r("@faasjs/react")])),_:1,__:[1]}),e[3]||(e[3]=r(" / ErrorBoundary"))]),e[19]||(e[19]=o("h1",{id:"class-errorboundary",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#class-errorboundary"},[o("span",null,"Class: ErrorBoundary")])],-1)),e[20]||(e[20]=o("h2",{id:"extends",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#extends"},[o("span",null,"Extends")])],-1)),o("ul",null,[o("li",null,[e[5]||(e[5]=o("code",null,"Component",-1)),e[6]||(e[6]=r("<")),n(d,{to:"/doc/react/interfaces/ErrorBoundaryProps.html"},{default:a(()=>e[4]||(e[4]=[o("code",null,"ErrorBoundaryProps",-1)])),_:1,__:[4]}),e[7]||(e[7]=r(", { ")),e[8]||(e[8]=o("code",null,"error?",-1)),e[9]||(e[9]=r(": ")),e[10]||(e[10]=o("code",null,"Error",-1)),e[11]||(e[11]=r("; ")),e[12]||(e[12]=o("code",null,"info?",-1)),e[13]||(e[13]=r(": { ")),e[14]||(e[14]=o("code",null,"componentStack?",-1)),e[15]||(e[15]=r(": ")),e[16]||(e[16]=o("code",null,"string",-1)),e[17]||(e[17]=r("; }; }>"))])]),e[21]||(e[21]=s('<h2 id="constructors" tabindex="-1"><a class="header-anchor" href="#constructors"><span>Constructors</span></a></h2><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor"><span>Constructor</span></a></h3><blockquote><p><strong>new ErrorBoundary</strong>(<code>props</code>): <code>ErrorBoundary</code></p></blockquote><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h4><h5 id="props" tabindex="-1"><a class="header-anchor" href="#props"><span>props</span></a></h5>',5)),o("p",null,[n(d,{to:"/doc/react/interfaces/ErrorBoundaryProps.html"},{default:a(()=>e[18]||(e[18]=[o("code",null,"ErrorBoundaryProps",-1)])),_:1,__:[18]})]),e[22]||(e[22]=s('<h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h4><p><code>ErrorBoundary</code></p><h4 id="overrides" tabindex="-1"><a class="header-anchor" href="#overrides"><span>Overrides</span></a></h4><p><code>Component&lt; ErrorBoundaryProps, { error?: Error info?: { componentStack?: string } } &gt;.constructor</code></p><h2 id="methods" tabindex="-1"><a class="header-anchor" href="#methods"><span>Methods</span></a></h2><h3 id="componentdidcatch" tabindex="-1"><a class="header-anchor" href="#componentdidcatch"><span>componentDidCatch()</span></a></h3><blockquote><p><strong>componentDidCatch</strong>(<code>error</code>, <code>info</code>): <code>void</code></p></blockquote><p>Catches exceptions generated in descendant components. Unhandled exceptions will cause the entire component tree to unmount.</p><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1"><span>Parameters</span></a></h4><h5 id="error" tabindex="-1"><a class="header-anchor" href="#error"><span>error</span></a></h5><p><code>Error</code></p><h5 id="info" tabindex="-1"><a class="header-anchor" href="#info"><span>info</span></a></h5><p><code>any</code></p><h4 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1"><span>Returns</span></a></h4><p><code>void</code></p><h4 id="overrides-1" tabindex="-1"><a class="header-anchor" href="#overrides-1"><span>Overrides</span></a></h4><p><code>Component.componentDidCatch</code></p><h3 id="render" tabindex="-1"><a class="header-anchor" href="#render"><span>render()</span></a></h3><blockquote><p><strong>render</strong>(): <code>string</code> | <code>number</code> | <code>bigint</code> | <code>boolean</code> | <code>Element</code> | <code>Iterable</code>&lt;<code>ReactNode</code>, <code>any</code>, <code>any</code>&gt; | <code>Promise</code>&lt;<code>AwaitedReactNode</code>&gt;</p></blockquote><h4 id="returns-2" tabindex="-1"><a class="header-anchor" href="#returns-2"><span>Returns</span></a></h4><p><code>string</code> | <code>number</code> | <code>bigint</code> | <code>boolean</code> | <code>Element</code> | <code>Iterable</code>&lt;<code>ReactNode</code>, <code>any</code>, <code>any</code>&gt; | <code>Promise</code>&lt;<code>AwaitedReactNode</code>&gt;</p><h4 id="overrides-2" tabindex="-1"><a class="header-anchor" href="#overrides-2"><span>Overrides</span></a></h4><p><code>Component.render</code></p><h2 id="properties" tabindex="-1"><a class="header-anchor" href="#properties"><span>Properties</span></a></h2><h3 id="displayname" tabindex="-1"><a class="header-anchor" href="#displayname"><span>displayName</span></a></h3><blockquote><p><code>static</code> <strong>displayName</strong>: <code>string</code> = <code>&#39;ErrorBoundary&#39;</code></p></blockquote><h3 id="whydidyourender" tabindex="-1"><a class="header-anchor" href="#whydidyourender"><span>whyDidYouRender</span></a></h3><blockquote><p><code>static</code> <strong>whyDidYouRender</strong>: <code>boolean</code> = <code>true</code></p></blockquote>',28))])}const b=t(l,[["render",h]]),f=JSON.parse('{"path":"/doc/react/classes/ErrorBoundary.html","title":"Class: ErrorBoundary","lang":"en","frontmatter":{},"git":{},"filePathRelative":"doc/react/classes/ErrorBoundary.md"}');export{b as comp,f as data};
