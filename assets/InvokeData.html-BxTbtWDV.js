import{_ as s,r as c,c as d,b as e,d as a,w as o,e as t,a as l,o as r}from"./app-opz6_KZh.js";const i={},h=l('<h1 id="type-alias-invokedata-tevent-tcontext-tresult" tabindex="-1"><a class="header-anchor" href="#type-alias-invokedata-tevent-tcontext-tresult"><span>Type Alias: InvokeData&lt;TEvent, TContext, TResult&gt;</span></a></h1><blockquote><p><strong>InvokeData</strong>&lt;<code>TEvent</code>, <code>TContext</code>, <code>TResult</code>&gt;: <code>object</code></p></blockquote><h2 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters"><span>Type Parameters</span></a></h2><p>• <strong>TEvent</strong> = <code>any</code></p><p>• <strong>TContext</strong> = <code>any</code></p><p>• <strong>TResult</strong> = <code>any</code></p><h2 id="index-signature" tabindex="-1"><a class="header-anchor" href="#index-signature"><span>Index Signature</span></a></h2><p>[<code>key</code>: <code>string</code>]: <code>any</code></p><h2 id="type-declaration" tabindex="-1"><a class="header-anchor" href="#type-declaration"><span>Type declaration</span></a></h2><h3 id="callback" tabindex="-1"><a class="header-anchor" href="#callback"><span>callback</span></a></h3><blockquote><p><strong>callback</strong>: <code>any</code></p></blockquote><h3 id="config" tabindex="-1"><a class="header-anchor" href="#config"><span>config</span></a></h3>',12),p=e("strong",null,"config",-1),g=e("code",null,"Config",-1),u=l('<h3 id="context" tabindex="-1"><a class="header-anchor" href="#context"><span>context</span></a></h3><blockquote><p><strong>context</strong>: <code>TContext</code></p></blockquote><h3 id="event" tabindex="-1"><a class="header-anchor" href="#event"><span>event</span></a></h3><blockquote><p><strong>event</strong>: <code>TEvent</code></p></blockquote><h3 id="handler" tabindex="-1"><a class="header-anchor" href="#handler"><span>handler?</span></a></h3>',5),k=e("code",null,"optional",-1),_=e("strong",null,"handler",-1),v=e("code",null,"Handler",-1),x=e("code",null,"TEvent",-1),b=e("code",null,"TContext",-1),f=e("code",null,"TResult",-1),y=l('<h3 id="logger" tabindex="-1"><a class="header-anchor" href="#logger"><span>logger</span></a></h3><blockquote><p><strong>logger</strong>: <code>Logger</code></p></blockquote><h3 id="response" tabindex="-1"><a class="header-anchor" href="#response"><span>response</span></a></h3><blockquote><p><strong>response</strong>: <code>any</code></p></blockquote>',4);function T(m,q){const n=c("RouteLink");return r(),d("div",null,[e("p",null,[a(n,{to:"/doc/test/"},{default:o(()=>[t("Documents")]),_:1}),t(" / "),a(n,{to:"/doc/test/"},{default:o(()=>[t("@faasjs/test")]),_:1}),t(" / InvokeData")]),h,e("blockquote",null,[e("p",null,[p,t(": "),a(n,{to:"/doc/test/type-aliases/Config.html"},{default:o(()=>[g]),_:1})])]),u,e("blockquote",null,[e("p",null,[k,t(),_,t(": "),a(n,{to:"/doc/test/type-aliases/Handler.html"},{default:o(()=>[v]),_:1}),t("<"),x,t(", "),b,t(", "),f,t(">")])]),y])}const I=s(i,[["render",T],["__file","InvokeData.html.vue"]]),D=JSON.parse('{"path":"/doc/test/type-aliases/InvokeData.html","title":"Type Alias: InvokeData<TEvent, TContext, TResult>","lang":"en","frontmatter":{},"headers":[{"level":2,"title":"Type Parameters","slug":"type-parameters","link":"#type-parameters","children":[]},{"level":2,"title":"Index Signature","slug":"index-signature","link":"#index-signature","children":[]},{"level":2,"title":"Type declaration","slug":"type-declaration","link":"#type-declaration","children":[{"level":3,"title":"callback","slug":"callback","link":"#callback","children":[]},{"level":3,"title":"config","slug":"config","link":"#config","children":[]},{"level":3,"title":"context","slug":"context","link":"#context","children":[]},{"level":3,"title":"event","slug":"event","link":"#event","children":[]},{"level":3,"title":"handler?","slug":"handler","link":"#handler","children":[]},{"level":3,"title":"logger","slug":"logger","link":"#logger","children":[]},{"level":3,"title":"response","slug":"response","link":"#response","children":[]}]}],"git":{"updatedTime":null},"filePathRelative":"doc/test/type-aliases/InvokeData.md"}');export{I as comp,D as data};
