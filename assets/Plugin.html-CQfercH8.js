import{_ as s,c as r,b as t,d as a,e as l,f as n,a as d,r as i,o as p}from"./app-BNDiyHrF.js";const u={};function g(m,e){const o=i("RouteLink");return p(),r("div",null,[t("p",null,[a(o,{to:"/doc/test/"},{default:l(()=>e[0]||(e[0]=[n("Documents")])),_:1}),e[2]||(e[2]=n(" / ")),a(o,{to:"/doc/test/"},{default:l(()=>e[1]||(e[1]=[n("@faasjs/test")])),_:1}),e[3]||(e[3]=n(" / Plugin"))]),e[20]||(e[20]=d('<h1 id="type-alias-plugin" tabindex="-1"><a class="header-anchor" href="#type-alias-plugin"><span>Type Alias: Plugin</span></a></h1><blockquote><p><strong>Plugin</strong>: <code>object</code></p></blockquote><h2 id="index-signature" tabindex="-1"><a class="header-anchor" href="#index-signature"><span>Index Signature</span></a></h2><p>[<code>key</code>: <code>string</code>]: <code>any</code></p><h2 id="type-declaration" tabindex="-1"><a class="header-anchor" href="#type-declaration"><span>Type declaration</span></a></h2><h3 id="name" tabindex="-1"><a class="header-anchor" href="#name"><span>name</span></a></h3><blockquote><p><code>readonly</code> <strong>name</strong>: <code>string</code></p></blockquote><h3 id="oninvoke" tabindex="-1"><a class="header-anchor" href="#oninvoke"><span>onInvoke()?</span></a></h3><blockquote><p><code>optional</code> <strong>onInvoke</strong>: (<code>data</code>, <code>next</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;</p></blockquote><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h4>',10)),t("p",null,[e[5]||(e[5]=n("• ")),e[6]||(e[6]=t("strong",null,"data",-1)),e[7]||(e[7]=n(": ")),a(o,{to:"/doc/test/type-aliases/InvokeData.html"},{default:l(()=>e[4]||(e[4]=[t("code",null,"InvokeData",-1)])),_:1})]),t("p",null,[e[9]||(e[9]=n("• ")),e[10]||(e[10]=t("strong",null,"next",-1)),e[11]||(e[11]=n(": ")),a(o,{to:"/doc/test/type-aliases/Next.html"},{default:l(()=>e[8]||(e[8]=[t("code",null,"Next",-1)])),_:1})]),e[21]||(e[21]=d('<h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h3 id="onmount" tabindex="-1"><a class="header-anchor" href="#onmount"><span>onMount()?</span></a></h3><blockquote><p><code>optional</code> <strong>onMount</strong>: (<code>data</code>, <code>next</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;</p></blockquote><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1"><span>Parameters</span></a></h4>',5)),t("p",null,[e[13]||(e[13]=n("• ")),e[14]||(e[14]=t("strong",null,"data",-1)),e[15]||(e[15]=n(": ")),a(o,{to:"/doc/test/type-aliases/MountData.html"},{default:l(()=>e[12]||(e[12]=[t("code",null,"MountData",-1)])),_:1})]),t("p",null,[e[17]||(e[17]=n("• ")),e[18]||(e[18]=t("strong",null,"next",-1)),e[19]||(e[19]=n(": ")),a(o,{to:"/doc/test/type-aliases/Next.html"},{default:l(()=>e[16]||(e[16]=[t("code",null,"Next",-1)])),_:1})]),e[22]||(e[22]=d('<h4 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1"><span>Returns</span></a></h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h3 id="type" tabindex="-1"><a class="header-anchor" href="#type"><span>type</span></a></h3><blockquote><p><code>readonly</code> <strong>type</strong>: <code>string</code></p></blockquote>',4))])}const k=s(u,[["render",g],["__file","Plugin.html.vue"]]),x=JSON.parse('{"path":"/doc/test/type-aliases/Plugin.html","title":"Type Alias: Plugin","lang":"en","frontmatter":{},"headers":[{"level":2,"title":"Index Signature","slug":"index-signature","link":"#index-signature","children":[]},{"level":2,"title":"Type declaration","slug":"type-declaration","link":"#type-declaration","children":[{"level":3,"title":"name","slug":"name","link":"#name","children":[]},{"level":3,"title":"onInvoke()?","slug":"oninvoke","link":"#oninvoke","children":[]},{"level":3,"title":"onMount()?","slug":"onmount","link":"#onmount","children":[]},{"level":3,"title":"type","slug":"type","link":"#type","children":[]}]}],"git":{"updatedTime":null},"filePathRelative":"doc/test/type-aliases/Plugin.md"}');export{k as comp,x as data};
