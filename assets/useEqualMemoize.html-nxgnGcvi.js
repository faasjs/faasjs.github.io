import{_ as s,c as r,b as u,a as i,d as t,e as a,w as n,r as d,o as l}from"./app-DK9KTdMJ.js";const c={};function m(p,e){const o=d("RouteLink");return l(),r("div",null,[u("p",null,[t(o,{to:"/doc/react/"},{default:n(()=>[...e[0]||(e[0]=[a("Documents",-1)])]),_:1}),e[2]||(e[2]=a(" / ",-1)),t(o,{to:"/doc/react/"},{default:n(()=>[...e[1]||(e[1]=[a("@faasjs/react",-1)])]),_:1}),e[3]||(e[3]=a(" / useEqualMemoize",-1))]),e[4]||(e[4]=i('<h1 id="function-useequalmemoize" tabindex="-1"><a class="header-anchor" href="#function-useequalmemoize"><span>Function: useEqualMemoize()</span></a></h1><blockquote><p><strong>useEqualMemoize</strong>(<code>value</code>): <code>any</code></p></blockquote><p>Custom hook that memoizes a value using deep equality comparison.</p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h2><h3 id="value" tabindex="-1"><a class="header-anchor" href="#value"><span>value</span></a></h3><p><code>any</code></p><p>The value to be memoized.</p><h2 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h2><p><code>any</code></p><p>The memoized value.</p>',10))])}const f=s(c,[["render",m]]),q=JSON.parse('{"path":"/doc/react/functions/useEqualMemoize.html","title":"Function: useEqualMemoize()","lang":"en","frontmatter":{},"git":{},"filePathRelative":"doc/react/functions/useEqualMemoize.md"}');export{f as comp,q as data};
