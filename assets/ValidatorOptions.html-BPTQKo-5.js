import{_ as n,c as s,b as d,d as a,e as r,f as t,a as l,r as i,o as c}from"./app-dNGPS49Q.js";const p={};function h(u,e){const o=i("RouteLink");return c(),s("div",null,[d("p",null,[a(o,{to:"/doc/http/"},{default:r(()=>e[0]||(e[0]=[t("Documents")])),_:1}),e[2]||(e[2]=t(" / ")),a(o,{to:"/doc/http/"},{default:r(()=>e[1]||(e[1]=[t("@faasjs/http")])),_:1}),e[3]||(e[3]=t(" / ValidatorOptions"))]),e[4]||(e[4]=l('<h1 id="type-alias-validatoroptions-content" tabindex="-1"><a class="header-anchor" href="#type-alias-validatoroptions-content"><span>Type Alias: <s>ValidatorOptions&lt;Content&gt;</s></span></a></h1><blockquote><p><strong>ValidatorOptions</strong>&lt;<code>Content</code>&gt;: <code>object</code></p></blockquote><h2 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters"><span>Type Parameters</span></a></h2><p>• <strong>Content</strong> = <code>Record</code>&lt;<code>string</code>, <code>any</code>&gt;</p><h2 id="type-declaration" tabindex="-1"><a class="header-anchor" href="#type-declaration"><span>Type declaration</span></a></h2><h3 id="onerror" tabindex="-1"><a class="header-anchor" href="#onerror"><span><s>onError()?</s></span></a></h3><blockquote><p><code>optional</code> <strong>onError</strong>: (<code>type</code>, <code>key</code>, <code>value</code>?) =&gt; <code>object</code> | <code>void</code></p></blockquote><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h4><p>• <strong>type</strong>: <code>string</code></p><p>• <strong>key</strong>: <code>string</code> | <code>string</code>[]</p><p>• <strong>value?</strong>: <code>any</code></p><h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h4><p><code>object</code> | <code>void</code></p><h3 id="rules" tabindex="-1"><a class="header-anchor" href="#rules"><span><s>rules</s></span></a></h3><blockquote><p><strong>rules</strong>: <code>{ [k in keyof Content]?: ValidatorRuleOptions }</code></p></blockquote><h3 id="whitelist" tabindex="-1"><a class="header-anchor" href="#whitelist"><span><s>whitelist?</s></span></a></h3><blockquote><p><code>optional</code> <strong>whitelist</strong>: <code>&quot;error&quot;</code> | <code>&quot;ignore&quot;</code></p></blockquote><h2 id="deprecated" tabindex="-1"><a class="header-anchor" href="#deprecated"><span>Deprecated</span></a></h2>',18))])}const y=n(p,[["render",h],["__file","ValidatorOptions.html.vue"]]),m=JSON.parse('{"path":"/doc/http/type-aliases/ValidatorOptions.html","title":"Type Alias: ValidatorOptions<Content>","lang":"en","frontmatter":{},"headers":[{"level":2,"title":"Type Parameters","slug":"type-parameters","link":"#type-parameters","children":[]},{"level":2,"title":"Type declaration","slug":"type-declaration","link":"#type-declaration","children":[{"level":3,"title":"onError()?","slug":"onerror","link":"#onerror","children":[]},{"level":3,"title":"rules","slug":"rules","link":"#rules","children":[]},{"level":3,"title":"whitelist?","slug":"whitelist","link":"#whitelist","children":[]}]},{"level":2,"title":"Deprecated","slug":"deprecated","link":"#deprecated","children":[]}],"git":{"updatedTime":null},"filePathRelative":"doc/http/type-aliases/ValidatorOptions.md"}');export{y as comp,m as data};
