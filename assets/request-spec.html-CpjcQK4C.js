import{_ as a,c as e,a as n,o as t}from"./app-DudbQBtN.js";const i={};function r(o,s){return t(),e("div",null,s[0]||(s[0]=[n(`<h1 id="faasjs-request-specifications" tabindex="-1"><a class="header-anchor" href="#faasjs-request-specifications"><span>FaasJS Request Specifications</span></a></h1><p>To ensure consistency and avoid confusion during team collaboration, FaasJS offers built-in request specifications and compatible browser plugins.</p><h2 id="requests" tabindex="-1"><a class="header-anchor" href="#requests"><span>Requests</span></a></h2><h3 id="headers" tabindex="-1"><a class="header-anchor" href="#headers"><span>Headers</span></a></h3><ul><li><strong>Content-Type:</strong> <code>application/json; charset=UTF-8</code></li></ul><h3 id="method" tabindex="-1"><a class="header-anchor" href="#method"><span>Method</span></a></h3><p>Standardized as <code>POST</code>.</p><h3 id="path" tabindex="-1"><a class="header-anchor" href="#path"><span>Path</span></a></h3><p>By default, the request path mirrors the directory and file name within your project.</p><h3 id="query-parameters" tabindex="-1"><a class="header-anchor" href="#query-parameters"><span>Query Parameters</span></a></h3><p><strong>Discouraged</strong>. Use the Body section for parameter transmission instead.</p><h3 id="body" tabindex="-1"><a class="header-anchor" href="#body"><span>Body</span></a></h3><p>Empty or formatted in JSON.</p><h2 id="responses" tabindex="-1"><a class="header-anchor" href="#responses"><span>Responses</span></a></h2><h3 id="headers-1" tabindex="-1"><a class="header-anchor" href="#headers-1"><span>Headers</span></a></h3><ul><li><strong>Content-Type:</strong> <code>application/json; charset=UTF-8</code></li></ul><h4 id="status-codes" tabindex="-1"><a class="header-anchor" href="#status-codes"><span>Status Codes</span></a></h4><ul><li><strong>200</strong> Request successful with response data.</li><li><strong>201</strong> Request successful but without response data.</li><li><strong>500</strong> Request failed.</li></ul><p>Additional status codes can be implemented based on specific business needs.</p><h3 id="body-1" tabindex="-1"><a class="header-anchor" href="#body-1"><span>Body</span></a></h3><h4 id="_200-status" tabindex="-1"><a class="header-anchor" href="#_200-status"><span>200 Status</span></a></h4><ul><li><strong>data</strong> (Required): Contains business information.</li></ul><p><strong>Examples:</strong></p><p>Returns a string.</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token string">&quot;value&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Returns an object.</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token string">&quot;value&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_201-status" tabindex="-1"><a class="header-anchor" href="#_201-status"><span>201 Status</span></a></h4><p>No body included.</p><h4 id="_500-status" tabindex="-1"><a class="header-anchor" href="#_500-status"><span>500 Status</span></a></h4><ul><li><strong>error</strong> (Required): Error object <ul><li><strong>message</strong> (Required): Description of the error. (Using <code>\\n</code> to separate multiple error messages).</li></ul></li></ul><p>Example:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;error&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;An error occurred.\\nPlease try again.&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="frequently-asked-questions" tabindex="-1"><a class="header-anchor" href="#frequently-asked-questions"><span>Frequently Asked Questions</span></a></h2><h3 id="why-not-use-form-data-submissions" tabindex="-1"><a class="header-anchor" href="#why-not-use-form-data-submissions"><span>Why not use form data submissions?</span></a></h3><p>Form data submissions have two main drawbacks:</p><ol><li>Limited format: data can only be submitted as strings.</li><li>Nested data limitations: complex nested data structures can lead to excessively large submissions.</li></ol><h3 id="why-not-use-restful-or-graphql-apis" tabindex="-1"><a class="header-anchor" href="#why-not-use-restful-or-graphql-apis"><span>Why not use RESTful or GraphQL APIs?</span></a></h3><p>RESTful APIs require a deeper understanding of verbs and nouns for developers.</p><p>GraphQL, while powerful, involves complex parsing and authorization processes. Utilizing frameworks like Apollo can be cumbersome within a FaaS environment.</p><p>Therefore, FaasJS adopts a simplified approach, combining the clarity of RESTful with the flexibility of GraphQL.</p><p>Requests are defined solely using <code>action</code> and <code>params</code>.</p>`,42)]))}const l=a(i,[["render",r]]),d=JSON.parse('{"path":"/guide/request-spec.html","title":"FaasJS Request Specifications","lang":"en","frontmatter":{},"git":{"updatedTime":1746932043000,"contributors":[{"name":"Ben","username":"Ben","email":"ben@zfben.com","commits":1,"url":"https://github.com/Ben"}],"changelog":[{"hash":"698ae7e287b30aed446f684c867833a54004a8aa","time":1746932043000,"email":"ben@zfben.com","author":"Ben","message":"cleanup jest"}]},"filePathRelative":"guide/request-spec.md"}');export{l as comp,d as data};
