import{_ as c,c as r,b as s,a as o,d as t,e as a,w as p,r as l,o as i}from"./app-DK9KTdMJ.js";const u={};function d(k,n){const e=l("RouteLink");return i(),r("div",null,[s("p",null,[t(e,{to:"/doc/server/"},{default:p(()=>[...n[0]||(n[0]=[a("Documents",-1)])]),_:1}),n[2]||(n[2]=a(" / ",-1)),t(e,{to:"/doc/server/"},{default:p(()=>[...n[1]||(n[1]=[a("@faasjs/server",-1)])]),_:1}),n[3]||(n[3]=a(" / ServerOptions",-1))]),n[9]||(n[9]=o('<h1 id="type-alias-serveroptions" tabindex="-1"><a class="header-anchor" href="#type-alias-serveroptions"><span>Type Alias: ServerOptions</span></a></h1><blockquote><p><strong>ServerOptions</strong> = <code>object</code></p></blockquote><p>Configuration options for the server.</p><h2 id="properties" tabindex="-1"><a class="header-anchor" href="#properties"><span>Properties</span></a></h2><h3 id="beforehandle" tabindex="-1"><a class="header-anchor" href="#beforehandle"><span>beforeHandle?</span></a></h3>',5)),s("blockquote",null,[s("p",null,[n[5]||(n[5]=s("code",null,"optional",-1)),n[6]||(n[6]=a()),n[7]||(n[7]=s("strong",null,"beforeHandle",-1)),n[8]||(n[8]=a(": ",-1)),t(e,{to:"/doc/server/type-aliases/Middleware.html"},{default:p(()=>[...n[4]||(n[4]=[s("code",null,"Middleware",-1)])]),_:1})])]),n[10]||(n[10]=o(`<p>Callback function that is invoked before handling each request.</p><p>This function is executed asynchronously before the main request handling logic. It can be used for request preprocessing, authentication, logging, etc.</p><h4 id="param" tabindex="-1"><a class="header-anchor" href="#param"><span>Param</span></a></h4><p>The incoming HTTP request object.</p><h4 id="param-1" tabindex="-1"><a class="header-anchor" href="#param-1"><span>Param</span></a></h4><p>The server response object.</p><h4 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function-variable function">beforeHandle</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Processing </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>req<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> request to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>req<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">!==</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">)</span></span>
<span class="line">      res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">405</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;Allow&#39;</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// If you write response, it will finish the request</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="onclose" tabindex="-1"><a class="header-anchor" href="#onclose"><span>onClose()?</span></a></h3><blockquote><p><code>optional</code> <strong>onClose</strong>: (<code>context</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;</p></blockquote><p>Callback function that is invoked when the server is closed.</p><p>This function is executed asynchronously and can be used to perform cleanup tasks or log server shutdown events.</p><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h4><h5 id="context" tabindex="-1"><a class="header-anchor" href="#context"><span>context</span></a></h5><p>An object containing the logger instance.</p><h6 id="logger" tabindex="-1"><a class="header-anchor" href="#logger"><span>logger</span></a></h6><p><code>Logger</code></p><h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1"><span>Example</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function-variable function">onClose</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> logger <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Server closed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="onerror" tabindex="-1"><a class="header-anchor" href="#onerror"><span>onError()?</span></a></h3><blockquote><p><code>optional</code> <strong>onError</strong>: (<code>error</code>, <code>context</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;</p></blockquote><p>Callback function that is invoked when an error occurs.</p><p>This function is executed asynchronously and allows handling of errors that occur during server operation.</p><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1"><span>Parameters</span></a></h4><h5 id="error" tabindex="-1"><a class="header-anchor" href="#error"><span>error</span></a></h5><p><code>Error</code></p><p>The error that occurred.</p><h5 id="context-1" tabindex="-1"><a class="header-anchor" href="#context-1"><span>context</span></a></h5><p>An object containing the logger instance.</p><h6 id="logger-1" tabindex="-1"><a class="header-anchor" href="#logger-1"><span>logger</span></a></h6><p><code>Logger</code></p><h4 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1"><span>Returns</span></a></h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="example-2" tabindex="-1"><a class="header-anchor" href="#example-2"><span>Example</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function-variable function">onError</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> <span class="token punctuation">{</span> logger <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="onstart" tabindex="-1"><a class="header-anchor" href="#onstart"><span>onStart()?</span></a></h3><blockquote><p><code>optional</code> <strong>onStart</strong>: (<code>context</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;</p></blockquote><p>Callback function that is invoked when the server starts.</p><p>This function is executed asynchronously and will not interrupt the server if an error occurs during its execution.</p><h4 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2"><span>Parameters</span></a></h4><h5 id="context-2" tabindex="-1"><a class="header-anchor" href="#context-2"><span>context</span></a></h5><p>An object containing the logger instance.</p><h6 id="logger-2" tabindex="-1"><a class="header-anchor" href="#logger-2"><span>logger</span></a></h6><p><code>Logger</code></p><h4 id="returns-2" tabindex="-1"><a class="header-anchor" href="#returns-2"><span>Returns</span></a></h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="example-3" tabindex="-1"><a class="header-anchor" href="#example-3"><span>Example</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function-variable function">onStart</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> logger <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Server started&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="port" tabindex="-1"><a class="header-anchor" href="#port"><span>port?</span></a></h3><blockquote><p><code>optional</code> <strong>port</strong>: <code>number</code></p></blockquote><p>The port on which the server will listen. Defaults to <code>3000</code> if not provided.</p><h4 id="default" tabindex="-1"><a class="header-anchor" href="#default"><span>Default</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token number">3000</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,55))])}const g=c(u,[["render",d]]),v=JSON.parse('{"path":"/doc/server/type-aliases/ServerOptions.html","title":"Type Alias: ServerOptions","lang":"en","frontmatter":{},"git":{},"filePathRelative":"doc/server/type-aliases/ServerOptions.md"}');export{g as comp,v as data};
