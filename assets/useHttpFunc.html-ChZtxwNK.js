import{_ as r,c,b as o,a,d as n,e as t,w as s,r as p,o as l}from"./app-DudbQBtN.js";const i={};function u(h,e){const d=p("RouteLink");return l(),c("div",null,[o("p",null,[n(d,{to:"/doc/http/"},{default:s(()=>e[0]||(e[0]=[t("Documents")])),_:1}),e[2]||(e[2]=t(" / ")),n(d,{to:"/doc/http/"},{default:s(()=>e[1]||(e[1]=[t("@faasjs/http")])),_:1}),e[3]||(e[3]=t(" / useHttpFunc"))]),e[16]||(e[16]=a('<h1 id="function-usehttpfunc" tabindex="-1"><a class="header-anchor" href="#function-usehttpfunc"><span>Function: useHttpFunc()</span></a></h1><blockquote><p><strong>useHttpFunc</strong>&lt;<code>TParams</code>, <code>TCookie</code>, <code>TSession</code>, <code>TResult</code>&gt;(<code>handler</code>, <code>config?</code>): <code>Func</code>&lt;{[<code>key</code>: <code>string</code>]: <code>any</code>; <code>params?</code>: <code>TParams</code>; }, <code>any</code>, <code>TResult</code>&gt;</p></blockquote><p>A hook to create an HTTP function with specified handler and configuration.</p><h2 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters"><span>Type Parameters</span></a></h2><h3 id="tparams" tabindex="-1"><a class="header-anchor" href="#tparams"><span>TParams</span></a></h3><p><code>TParams</code> <em>extends</em> <code>Record</code>&lt;<code>string</code>, <code>any</code>&gt; = <code>Record</code>&lt;<code>string</code>, <code>any</code>&gt;</p><p>The type of the parameters object.</p><h3 id="tcookie" tabindex="-1"><a class="header-anchor" href="#tcookie"><span>TCookie</span></a></h3><p><code>TCookie</code> <em>extends</em> <code>Record</code>&lt;<code>string</code>, <code>string</code>&gt; = <code>Record</code>&lt;<code>string</code>, <code>string</code>&gt;</p><p>The type of the cookies object.</p><h3 id="tsession" tabindex="-1"><a class="header-anchor" href="#tsession"><span>TSession</span></a></h3><p><code>TSession</code> <em>extends</em> <code>Record</code>&lt;<code>string</code>, <code>any</code>&gt; = <code>Record</code>&lt;<code>string</code>, <code>any</code>&gt;</p><p>The type of the session object.</p><h3 id="tresult" tabindex="-1"><a class="header-anchor" href="#tresult"><span>TResult</span></a></h3><p><code>TResult</code> = <code>any</code></p><p>The type of the result.</p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h2><h3 id="handler" tabindex="-1"><a class="header-anchor" href="#handler"><span>handler</span></a></h3>',18)),o("p",null,[e[5]||(e[5]=t("() => ")),n(d,{to:"/doc/http/type-aliases/HttpFuncHandler.html"},{default:s(()=>e[4]||(e[4]=[o("code",null,"HttpFuncHandler",-1)])),_:1}),e[6]||(e[6]=t("<")),e[7]||(e[7]=o("code",null,"TParams",-1)),e[8]||(e[8]=t(", ")),e[9]||(e[9]=o("code",null,"TCookie",-1)),e[10]||(e[10]=t(", ")),e[11]||(e[11]=o("code",null,"TSession",-1)),e[12]||(e[12]=t(", ")),e[13]||(e[13]=o("code",null,"TResult",-1)),e[14]||(e[14]=t(">"))]),e[17]||(e[17]=o("p",null,"The function handler to be used.",-1)),e[18]||(e[18]=o("h3",{id:"config",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#config"},[o("span",null,"config?")])],-1)),e[19]||(e[19]=o("p",null,"Optional configuration object.",-1)),e[20]||(e[20]=o("h4",{id:"http",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#http"},[o("span",null,"http?")])],-1)),o("p",null,[n(d,{to:"/doc/http/type-aliases/HttpConfig.html"},{default:s(()=>e[15]||(e[15]=[o("code",null,"HttpConfig",-1)])),_:1})]),e[21]||(e[21]=a('<p>Optional HTTP configuration.</p><h2 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h2><p><code>Func</code>&lt;{[<code>key</code>: <code>string</code>]: <code>any</code>; <code>params?</code>: <code>TParams</code>; }, <code>any</code>, <code>TResult</code>&gt;</p><p>The created HTTP function.</p>',4))])}const m=r(i,[["render",u]]),T=JSON.parse('{"path":"/doc/http/functions/useHttpFunc.html","title":"Function: useHttpFunc()","lang":"en","frontmatter":{},"git":{},"filePathRelative":"doc/http/functions/useHttpFunc.md"}');export{m as comp,T as data};
