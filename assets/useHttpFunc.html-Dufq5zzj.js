import{_ as a,c as p,b as o,d as s,e as d,f as t,a as r,r as c,o as l}from"./app-BARGm1Fu.js";const i={};function u(g,e){const n=c("RouteLink");return l(),p("div",null,[o("p",null,[s(n,{to:"/doc/http/"},{default:d(()=>e[0]||(e[0]=[t("Documents")])),_:1}),e[2]||(e[2]=t(" / ")),s(n,{to:"/doc/http/"},{default:d(()=>e[1]||(e[1]=[t("@faasjs/http")])),_:1}),e[3]||(e[3]=t(" / useHttpFunc"))]),e[15]||(e[15]=r('<h1 id="function-usehttpfunc" tabindex="-1"><a class="header-anchor" href="#function-usehttpfunc"><span>Function: useHttpFunc()</span></a></h1><blockquote><p><strong>useHttpFunc</strong>&lt;<code>TParams</code>, <code>TCookie</code>, <code>TSession</code>, <code>TResult</code>&gt;(<code>handler</code>, <code>config</code>?): <code>Func</code>&lt;<code>object</code>, <code>any</code>, <code>TResult</code>&gt;</p></blockquote><p>A hook to create an HTTP function with specified handler and configuration.</p><h2 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters"><span>Type Parameters</span></a></h2><p>• <strong>TParams</strong> <em>extends</em> <code>Record</code>&lt;<code>string</code>, <code>any</code>&gt; = <code>Record</code>&lt;<code>string</code>, <code>any</code>&gt;</p><p>The type of the parameters object.</p><p>• <strong>TCookie</strong> <em>extends</em> <code>Record</code>&lt;<code>string</code>, <code>string</code>&gt; = <code>Record</code>&lt;<code>string</code>, <code>string</code>&gt;</p><p>The type of the cookies object.</p><p>• <strong>TSession</strong> <em>extends</em> <code>Record</code>&lt;<code>string</code>, <code>any</code>&gt; = <code>Record</code>&lt;<code>string</code>, <code>any</code>&gt;</p><p>The type of the session object.</p><p>• <strong>TResult</strong> = <code>any</code></p><p>The type of the result.</p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h2><p>• <strong>handler</strong></p><p>The function handler to be used.</p><p>• <strong>config?</strong></p><p>Optional configuration object.</p>',17)),o("p",null,[e[5]||(e[5]=t("• ")),e[6]||(e[6]=o("strong",null,"config.http?",-1)),e[7]||(e[7]=t(": ")),s(n,{to:"/doc/http/type-aliases/HttpConfig.html"},{default:d(()=>e[4]||(e[4]=[o("code",null,"HttpConfig",-1)])),_:1}),e[8]||(e[8]=t("<")),e[9]||(e[9]=o("code",null,"any",-1)),e[10]||(e[10]=t(", ")),e[11]||(e[11]=o("code",null,"any",-1)),e[12]||(e[12]=t(", ")),e[13]||(e[13]=o("code",null,"any",-1)),e[14]||(e[14]=t(">"))]),e[16]||(e[16]=r('<p>Optional HTTP configuration.</p><h2 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h2><p><code>Func</code>&lt;<code>object</code>, <code>any</code>, <code>TResult</code>&gt;</p><p>The created HTTP function.</p><h3 id="params" tabindex="-1"><a class="header-anchor" href="#params"><span>params?</span></a></h3><blockquote><p><code>optional</code> <strong>params</strong>: <code>TParams</code></p></blockquote>',6))])}const f=a(i,[["render",u],["__file","useHttpFunc.html.vue"]]),h=JSON.parse('{"path":"/doc/http/functions/useHttpFunc.html","title":"Function: useHttpFunc()","lang":"en","frontmatter":{},"headers":[{"level":2,"title":"Type Parameters","slug":"type-parameters","link":"#type-parameters","children":[]},{"level":2,"title":"Parameters","slug":"parameters","link":"#parameters","children":[]},{"level":2,"title":"Returns","slug":"returns","link":"#returns","children":[{"level":3,"title":"params?","slug":"params","link":"#params","children":[]}]}],"git":{},"filePathRelative":"doc/http/functions/useHttpFunc.md"}');export{f as comp,h as data};
