import{_ as t,r as o,o as l,c as p,a as d,d as s,w as n,b as e,e as c}from"./app-CS2Brm9l.js";const r={},i=c(`<h1 id="type-alias-requestoptions" tabindex="-1"><a class="header-anchor" href="#type-alias-requestoptions"><span>Type alias: RequestOptions</span></a></h1><blockquote><p><strong>RequestOptions</strong>: <code>object</code></p></blockquote><h2 id="type-declaration" tabindex="-1"><a class="header-anchor" href="#type-declaration"><span>Type declaration</span></a></h2><h3 id="agent" tabindex="-1"><a class="header-anchor" href="#agent"><span>agent?</span></a></h3><blockquote><p><code>optional</code> <strong>agent</strong>: <code>boolean</code></p></blockquote><h3 id="auth" tabindex="-1"><a class="header-anchor" href="#auth"><span>auth?</span></a></h3><blockquote><p><code>optional</code> <strong>auth</strong>: <code>string</code></p></blockquote><p>The authentication credentials to use for the request.</p><p>Format: <code>username:password</code></p><h3 id="body" tabindex="-1"><a class="header-anchor" href="#body"><span>body?</span></a></h3><blockquote><p><code>optional</code> <strong>body</strong>: <code>object</code> | <code>string</code></p></blockquote><h3 id="downloadfile" tabindex="-1"><a class="header-anchor" href="#downloadfile"><span>downloadFile?</span></a></h3><blockquote><p><code>optional</code> <strong>downloadFile</strong>: <code>string</code></p></blockquote><p>Path of downloading a file from the server.</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">&#39;https://example.com&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> downloadFile<span class="token operator">:</span> <span class="token string">&#39;filepath&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="downloadstream" tabindex="-1"><a class="header-anchor" href="#downloadstream"><span>downloadStream?</span></a></h3><blockquote><p><code>optional</code> <strong>downloadStream</strong>: <code>NodeJS.WritableStream</code></p></blockquote><p>Create a write stream to download a file.</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createWriteStream <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span>

<span class="token keyword">const</span> stream <span class="token operator">=</span> <span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">&#39;filepath&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">&#39;https://example.com&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> downloadStream<span class="token operator">:</span> stream <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="file" tabindex="-1"><a class="header-anchor" href="#file"><span>file?</span></a></h3><blockquote><p><code>optional</code> <strong>file</strong>: <code>string</code></p></blockquote><p>Path of uploading a file to the server.</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">&#39;https://example.com&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> file<span class="token operator">:</span> <span class="token string">&#39;filepath&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="headers" tabindex="-1"><a class="header-anchor" href="#headers"><span>headers?</span></a></h3><blockquote><p><code>optional</code> <strong>headers</strong>: <code>http.OutgoingHttpHeaders</code></p></blockquote><h3 id="logger" tabindex="-1"><a class="header-anchor" href="#logger"><span>logger?</span></a></h3><blockquote><p><code>optional</code> <strong>logger</strong>: <code>Logger</code></p></blockquote><h3 id="method" tabindex="-1"><a class="header-anchor" href="#method"><span>method?</span></a></h3><blockquote><p><code>optional</code> <strong>method</strong>: <code>string</code></p></blockquote><p>The HTTP method to use when making the request. Defaults to GET.</p><h3 id="parse" tabindex="-1"><a class="header-anchor" href="#parse"><span>parse()?</span></a></h3><blockquote><p><code>optional</code> <strong>parse</strong>: (<code>body</code>) =&gt; <code>any</code></p></blockquote><p>Body parser. Defaults to <code>JSON.parse</code>.</p><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h4><p>â€¢ <strong>body</strong>: <code>string</code></p><h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h4><p><code>any</code></p><h3 id="passphrase" tabindex="-1"><a class="header-anchor" href="#passphrase"><span>passphrase?</span></a></h3><blockquote><p><code>optional</code> <strong>passphrase</strong>: <code>string</code></p></blockquote><h3 id="pfx" tabindex="-1"><a class="header-anchor" href="#pfx"><span>pfx?</span></a></h3><blockquote><p><code>optional</code> <strong>pfx</strong>: <code>Buffer</code></p></blockquote><h3 id="query" tabindex="-1"><a class="header-anchor" href="#query"><span>query?</span></a></h3><blockquote><p><code>optional</code> <strong>query</strong>: <code>object</code></p></blockquote><h4 id="index-signature" tabindex="-1"><a class="header-anchor" href="#index-signature"><span>Index signature</span></a></h4><p>[<code>key</code>: <code>string</code>]: <code>any</code></p><h3 id="timeout" tabindex="-1"><a class="header-anchor" href="#timeout"><span>timeout?</span></a></h3><blockquote><p><code>optional</code> <strong>timeout</strong>: <code>number</code></p></blockquote><p>Timeout in milliseconds,</p><h4 id="default" tabindex="-1"><a class="header-anchor" href="#default"><span>Default</span></a></h4><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token number">5000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,50);function u(h,g){const a=o("RouteLink");return l(),p("div",null,[d("p",null,[s(a,{to:"/doc/request/"},{default:n(()=>[e("Documents")]),_:1}),e(" / "),s(a,{to:"/doc/request/"},{default:n(()=>[e("@faasjs/request")]),_:1}),e(" / RequestOptions")]),i])}const b=t(r,[["render",u],["__file","RequestOptions.html.vue"]]),m=JSON.parse('{"path":"/doc/request/type-aliases/RequestOptions.html","title":"Type alias: RequestOptions","lang":"en","frontmatter":{},"headers":[{"level":2,"title":"Type declaration","slug":"type-declaration","link":"#type-declaration","children":[{"level":3,"title":"agent?","slug":"agent","link":"#agent","children":[]},{"level":3,"title":"auth?","slug":"auth","link":"#auth","children":[]},{"level":3,"title":"body?","slug":"body","link":"#body","children":[]},{"level":3,"title":"downloadFile?","slug":"downloadfile","link":"#downloadfile","children":[]},{"level":3,"title":"downloadStream?","slug":"downloadstream","link":"#downloadstream","children":[]},{"level":3,"title":"file?","slug":"file","link":"#file","children":[]},{"level":3,"title":"headers?","slug":"headers","link":"#headers","children":[]},{"level":3,"title":"logger?","slug":"logger","link":"#logger","children":[]},{"level":3,"title":"method?","slug":"method","link":"#method","children":[]},{"level":3,"title":"parse()?","slug":"parse","link":"#parse","children":[]},{"level":3,"title":"passphrase?","slug":"passphrase","link":"#passphrase","children":[]},{"level":3,"title":"pfx?","slug":"pfx","link":"#pfx","children":[]},{"level":3,"title":"query?","slug":"query","link":"#query","children":[]},{"level":3,"title":"timeout?","slug":"timeout","link":"#timeout","children":[]}]}],"git":{"updatedTime":null},"filePathRelative":"doc/request/type-aliases/RequestOptions.md"}');export{b as comp,m as data};
