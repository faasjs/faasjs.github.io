import{_ as o,c as p,b as l,d as e,e as t,f as n,a as r,r as i,o as c}from"./app-BYD7mR1L.js";const u={};function d(g,s){const a=i("RouteLink");return c(),p("div",null,[l("p",null,[e(a,{to:"/doc/logger/"},{default:t(()=>s[0]||(s[0]=[n("Documents")])),_:1}),s[2]||(s[2]=n(" / ")),e(a,{to:"/doc/logger/"},{default:t(()=>s[1]||(s[1]=[n("@faasjs/logger")])),_:1}),s[3]||(s[3]=n(" / flushTransportMessages"))]),s[4]||(s[4]=r(`<h1 id="function-flushtransportmessages" tabindex="-1"><a class="header-anchor" href="#function-flushtransportmessages"><span>Function: flushTransportMessages()</span></a></h1><blockquote><p><strong>flushTransportMessages</strong>(): <code>Promise</code>&lt;<code>void</code>&gt;</p></blockquote><p>Flushes the cached log messages by sending them to all registered transports.</p><p>If a flush operation is already in progress, this function will wait until the current flush is complete before starting a new one.</p><h2 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h2><p><code>Promise</code>&lt;<code>void</code>&gt;</p><p>A promise that resolves when the flush operation is complete.</p><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h2><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> flushTransportMessages <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@faasjs/logger&#39;</span></span>
<span class="line"></span>
<span class="line">process<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;SIGINT&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">await</span> <span class="token function">flushTransportMessages</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9))])}const f=o(u,[["render",d],["__file","flushTransportMessages.html.vue"]]),m=JSON.parse('{"path":"/doc/logger/functions/flushTransportMessages.html","title":"Function: flushTransportMessages()","lang":"en","frontmatter":{},"headers":[{"level":2,"title":"Returns","slug":"returns","link":"#returns","children":[]},{"level":2,"title":"Example","slug":"example","link":"#example","children":[]}],"git":{},"filePathRelative":"doc/logger/functions/flushTransportMessages.md"}');export{f as comp,m as data};
