import{_ as l,c as d,b as a,a as n,d as s,e as o,w as r,r as c,o as p}from"./app-CNofxtAJ.js";const i={};function f(g,e){const t=c("RouteLink");return p(),d("div",null,[a("p",null,[s(t,{to:"/doc/logger/"},{default:r(()=>e[0]||(e[0]=[o("Documents")])),_:1,__:[0]}),e[2]||(e[2]=o(" / ")),s(t,{to:"/doc/logger/"},{default:r(()=>e[1]||(e[1]=[o("@faasjs/logger")])),_:1,__:[1]}),e[3]||(e[3]=o(" / colorfy"))]),e[5]||(e[5]=n('<h1 id="function-colorfy" tabindex="-1"><a class="header-anchor" href="#function-colorfy"><span>Function: colorfy()</span></a></h1><blockquote><p><strong>colorfy</strong>(<code>level</code>, <code>message</code>): <code>string</code></p></blockquote><p>Apply ANSI color codes to a message based on the log level.</p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h2><h3 id="level" tabindex="-1"><a class="header-anchor" href="#level"><span>level</span></a></h3>',5)),a("p",null,[s(t,{to:"/doc/logger/type-aliases/Level.html"},{default:r(()=>e[4]||(e[4]=[a("code",null,"Level",-1)])),_:1,__:[4]})]),e[6]||(e[6]=n('<p>The log level to determine the color.</p><h3 id="message" tabindex="-1"><a class="header-anchor" href="#message"><span>message</span></a></h3><p><code>string</code></p><p>The message to be colorized.</p><h2 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h2><p><code>string</code></p><p>The colorized message string.</p>',7))])}const h=l(i,[["render",f]]),u=JSON.parse('{"path":"/doc/logger/functions/colorfy.html","title":"Function: colorfy()","lang":"en","frontmatter":{},"git":{},"filePathRelative":"doc/logger/functions/colorfy.md"}');export{h as comp,u as data};
