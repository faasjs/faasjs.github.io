import{_ as n,e as s,g as i,f as l,h as a,i as t,j as o,r as d,o as g}from"./app-EpdX85mg.js";const c={};function f(m,e){const r=d("RouteLink");return g(),s("div",null,[i("p",null,[a(r,{to:"/doc/logger/"},{default:o(()=>e[0]||(e[0]=[t("Documents")])),_:1}),e[2]||(e[2]=t(" / ")),a(r,{to:"/doc/logger/"},{default:o(()=>e[1]||(e[1]=[t("@faasjs/logger")])),_:1}),e[3]||(e[3]=t(" / formatLogger"))]),e[4]||(e[4]=l('<h1 id="function-formatlogger" tabindex="-1"><a class="header-anchor" href="#function-formatlogger"><span>Function: formatLogger()</span></a></h1><blockquote><p><strong>formatLogger</strong>(<code>fmt</code>, ...<code>args</code>): <code>string</code></p></blockquote><p>Formats the provided arguments into a string, filtering out any objects with a <code>__hidden__</code> property set to <code>true</code>. If formatting fails, it attempts to stringify each argument individually.</p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h2><h3 id="fmt" tabindex="-1"><a class="header-anchor" href="#fmt"><span>fmt</span></a></h3><p><code>any</code></p><h3 id="args" tabindex="-1"><a class="header-anchor" href="#args"><span>args</span></a></h3><p>...<code>any</code>[]</p><p>The arguments to format.</p><h2 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h2><p><code>string</code></p><p>The formatted string.</p>',12))])}const h=n(c,[["render",f],["__file","formatLogger.html.vue"]]),u=JSON.parse('{"path":"/doc/logger/functions/formatLogger.html","title":"Function: formatLogger()","lang":"en","frontmatter":{},"headers":[{"level":2,"title":"Parameters","slug":"parameters","link":"#parameters","children":[{"level":3,"title":"fmt","slug":"fmt","link":"#fmt","children":[]},{"level":3,"title":"args","slug":"args","link":"#args","children":[]}]},{"level":2,"title":"Returns","slug":"returns","link":"#returns","children":[]}],"git":{},"filePathRelative":"doc/logger/functions/formatLogger.md"}');export{h as comp,u as data};
