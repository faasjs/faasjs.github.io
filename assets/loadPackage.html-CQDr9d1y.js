import{_ as t,c as p,b as d,a as r,d as n,e,w as o,r as c,o as l}from"./app-DK9KTdMJ.js";const i={};function h(u,a){const s=c("RouteLink");return l(),p("div",null,[d("p",null,[n(s,{to:"/doc/load/"},{default:o(()=>[...a[0]||(a[0]=[e("Documents",-1)])]),_:1}),a[2]||(a[2]=e(" / ",-1)),n(s,{to:"/doc/load/"},{default:o(()=>[...a[1]||(a[1]=[e("@faasjs/load",-1)])]),_:1}),a[3]||(a[3]=e(" / loadPackage",-1))]),a[4]||(a[4]=r(`<h1 id="function-loadpackage" tabindex="-1"><a class="header-anchor" href="#function-loadpackage"><span>Function: loadPackage()</span></a></h1><blockquote><p><strong>loadPackage</strong>&lt;<code>T</code>&gt;(<code>name</code>, <code>defaultNames</code>): <code>Promise</code>&lt;<code>T</code>&gt;</p></blockquote><p>Asynchronously loads a package by its name, supporting both ESM and CommonJS runtimes.</p><p>Also supports loading TypeScript and TSX files by checking for the presence of the &quot;tsx&quot; package.</p><h2 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters"><span>Type Parameters</span></a></h2><h3 id="t" tabindex="-1"><a class="header-anchor" href="#t"><span>T</span></a></h3><p><code>T</code> = <code>unknown</code></p><p>The type of the module to be loaded.</p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h2><h3 id="name" tabindex="-1"><a class="header-anchor" href="#name"><span>name</span></a></h3><p><code>string</code></p><p>The name of the package to load.</p><h3 id="defaultnames" tabindex="-1"><a class="header-anchor" href="#defaultnames"><span>defaultNames</span></a></h3><p><code>string</code> | <code>string</code>[]</p><h2 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h2><p><code>Promise</code>&lt;<code>T</code>&gt;</p><p>A promise that resolves to the loaded module.</p><h2 id="throws" tabindex="-1"><a class="header-anchor" href="#throws"><span>Throws</span></a></h2><p>If the runtime is unknown.</p><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h2><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> myModule <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token generic-function"><span class="token function">loadPackage</span><span class="token generic class-name"><span class="token operator">&lt;</span>MyModuleType<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;my-module&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,21))])}const g=t(i,[["render",h]]),k=JSON.parse('{"path":"/doc/load/functions/loadPackage.html","title":"Function: loadPackage()","lang":"en","frontmatter":{},"git":{},"filePathRelative":"doc/load/functions/loadPackage.md"}');export{g as comp,k as data};
