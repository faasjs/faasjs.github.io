import{_ as s,c as e,a as n,o as l}from"./app-DeYOYs9P.js";const t={};function i(r,a){return l(),e("div",null,a[0]||(a[0]=[n(`<h1 id="http-请求规范" tabindex="-1"><a class="header-anchor" href="#http-请求规范"><span>HTTP 请求规范</span></a></h1><p>为了统一团队协作时请求规范不一致的情况，FaasJS 提供了内置的请求规范和配套的浏览器插件。</p><h2 id="请求" tabindex="-1"><a class="header-anchor" href="#请求"><span>请求</span></a></h2><h3 id="headers" tabindex="-1"><a class="header-anchor" href="#headers"><span>Headers</span></a></h3><ul><li><strong>Content-Type</strong>: application/json; charset=UTF-8</li></ul><h3 id="method" tabindex="-1"><a class="header-anchor" href="#method"><span>Method</span></a></h3><p>统一为 <code>POST</code>。</p><h3 id="path" tabindex="-1"><a class="header-anchor" href="#path"><span>Path</span></a></h3><p>请求路径默认与项目中的目录名和文件名一致。</p><h3 id="query" tabindex="-1"><a class="header-anchor" href="#query"><span>Query</span></a></h3><p>不建议使用，入参请通过 Body 传值。</p><h3 id="body" tabindex="-1"><a class="header-anchor" href="#body"><span>Body</span></a></h3><p>为空或 JSON 格式。</p><h2 id="响应" tabindex="-1"><a class="header-anchor" href="#响应"><span>响应</span></a></h2><h3 id="headers-1" tabindex="-1"><a class="header-anchor" href="#headers-1"><span>Headers</span></a></h3><ul><li><strong>Content-Type</strong>: application/json; charset=UTF-8</li></ul><h4 id="statuscode" tabindex="-1"><a class="header-anchor" href="#statuscode"><span>StatusCode</span></a></h4><ul><li><strong>200</strong> 请求成功且有返回信息</li><li><strong>201</strong> 请求成功但没有返回信息</li><li><strong>500</strong> 请求失败</li></ul><p>其它状态可根据具体业务情况添加。</p><h3 id="body-1" tabindex="-1"><a class="header-anchor" href="#body-1"><span>Body</span></a></h3><h4 id="_200-状态" tabindex="-1"><a class="header-anchor" href="#_200-状态"><span>200 状态</span></a></h4><ul><li><strong>data</strong> 必有，业务信息</li></ul><p>例：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token string">&quot;value&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token string">&quot;value&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_201-状态" tabindex="-1"><a class="header-anchor" href="#_201-状态"><span>201 状态</span></a></h3><p>无 body 内容。</p><h3 id="_500-状态" tabindex="-1"><a class="header-anchor" href="#_500-状态"><span>500 状态</span></a></h3><ul><li><strong>error</strong> 必有，Error 对象 <ul><li><strong>message</strong> 必有，错误信息内容</li></ul></li></ul><p>例：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;error&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;出错啦&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题"><span>常见问题</span></a></h2><h3 id="为什么不使用表单形式提交数据" tabindex="-1"><a class="header-anchor" href="#为什么不使用表单形式提交数据"><span>为什么不使用表单形式提交数据？</span></a></h3><p>因为表单提交数据有两个比较大的问题：一是格式只能为字符串，二是层级数据嵌套时，会导致提交的字数过多。</p><h3 id="为什么不使用-restful-或者-graphql" tabindex="-1"><a class="header-anchor" href="#为什么不使用-restful-或者-graphql"><span>为什么不使用 Restful 或者 GraphQL？</span></a></h3><p>Restful 的问题在于需要开发者对动词和名词有较深的理解，GraphQL 的问题在于解析和权限验证较复杂，在 FaaS 的环境中使用 Apollo 之类的框架会显得更重。</p><p>因此 FaasJS 综合了 Restful 和 GraphQL 中易于理解的部分，将请求标准设计为仅 <code>action</code> 和 <code>params</code> 的形式。</p>`,37)]))}const d=s(t,[["render",i],["__file","request-spec.html.vue"]]),o=JSON.parse('{"path":"/zh/guide/excel/request-spec.html","title":"HTTP 请求规范","lang":"zh","frontmatter":{},"headers":[{"level":2,"title":"请求","slug":"请求","link":"#请求","children":[{"level":3,"title":"Headers","slug":"headers","link":"#headers","children":[]},{"level":3,"title":"Method","slug":"method","link":"#method","children":[]},{"level":3,"title":"Path","slug":"path","link":"#path","children":[]},{"level":3,"title":"Query","slug":"query","link":"#query","children":[]},{"level":3,"title":"Body","slug":"body","link":"#body","children":[]}]},{"level":2,"title":"响应","slug":"响应","link":"#响应","children":[{"level":3,"title":"Headers","slug":"headers-1","link":"#headers-1","children":[]},{"level":3,"title":"Body","slug":"body-1","link":"#body-1","children":[]},{"level":3,"title":"201 状态","slug":"_201-状态","link":"#_201-状态","children":[]},{"level":3,"title":"500 状态","slug":"_500-状态","link":"#_500-状态","children":[]}]},{"level":2,"title":"常见问题","slug":"常见问题","link":"#常见问题","children":[{"level":3,"title":"为什么不使用表单形式提交数据？","slug":"为什么不使用表单形式提交数据","link":"#为什么不使用表单形式提交数据","children":[]},{"level":3,"title":"为什么不使用 Restful 或者 GraphQL？","slug":"为什么不使用-restful-或者-graphql","link":"#为什么不使用-restful-或者-graphql","children":[]}]}],"git":{"updatedTime":1734147113000},"filePathRelative":"zh/guide/excel/request-spec.md"}');export{d as comp,o as data};
