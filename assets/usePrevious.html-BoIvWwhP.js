import{_ as o,c as n,b as u,d as s,e as a,f as t,a as i,r as l,o as p}from"./app-CVgkr8FV.js";const d={};function c(h,e){const r=l("RouteLink");return p(),n("div",null,[u("p",null,[s(r,{to:"/doc/react/"},{default:a(()=>e[0]||(e[0]=[t("Documents")])),_:1}),e[2]||(e[2]=t(" / ")),s(r,{to:"/doc/react/"},{default:a(()=>e[1]||(e[1]=[t("@faasjs/react")])),_:1}),e[3]||(e[3]=t(" / usePrevious"))]),e[4]||(e[4]=i('<h1 id="function-useprevious" tabindex="-1"><a class="header-anchor" href="#function-useprevious"><span>Function: usePrevious()</span></a></h1><blockquote><p><strong>usePrevious</strong>&lt;<code>T</code>&gt;(<code>value</code>): <code>T</code> | <code>undefined</code></p></blockquote><p>Hook to store the previous value of a state or prop.</p><h2 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters"><span>Type Parameters</span></a></h2><p>• <strong>T</strong></p><p>The type of the value.</p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h2><p>• <strong>value</strong>: <code>T</code></p><p>The current value to be stored.</p><h2 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h2><p><code>T</code> | <code>undefined</code></p><ul><li>The previous value, or undefined if there is no previous value.</li></ul>',12))])}const f=o(d,[["render",c],["__file","usePrevious.html.vue"]]),m=JSON.parse('{"path":"/doc/react/functions/usePrevious.html","title":"Function: usePrevious()","lang":"en","frontmatter":{},"headers":[{"level":2,"title":"Type Parameters","slug":"type-parameters","link":"#type-parameters","children":[]},{"level":2,"title":"Parameters","slug":"parameters","link":"#parameters","children":[]},{"level":2,"title":"Returns","slug":"returns","link":"#returns","children":[]}],"git":{},"filePathRelative":"doc/react/functions/usePrevious.md"}');export{f as comp,m as data};
