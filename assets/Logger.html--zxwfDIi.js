import{_ as l,c as d,b as a,a as t,d as r,e as s,w as o,r as p,o as c}from"./app-DnNaNEo7.js";const i={};function h(g,e){const n=p("RouteLink");return c(),d("div",null,[a("p",null,[r(n,{to:"/doc/logger/"},{default:o(()=>e[0]||(e[0]=[s("Documents")])),_:1}),e[2]||(e[2]=s(" / ")),r(n,{to:"/doc/logger/"},{default:o(()=>e[1]||(e[1]=[s("@faasjs/logger")])),_:1}),e[3]||(e[3]=s(" / Logger"))]),e[12]||(e[12]=t(`<h1 id="class-logger" tabindex="-1"><a class="header-anchor" href="#class-logger"><span>Class: Logger</span></a></h1><p>Logger Class</p><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h2><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> logger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&#39;debug message&#39;</span><span class="token punctuation">)</span></span>
<span class="line">logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;info message&#39;</span><span class="token punctuation">)</span></span>
<span class="line">logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;warn message&#39;</span><span class="token punctuation">)</span></span>
<span class="line">logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;error message&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">logger<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;timer name&#39;</span><span class="token punctuation">)</span></span>
<span class="line">logger<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;timer name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;message&#39;</span><span class="token punctuation">)</span> <span class="token comment">// =&gt; &#39;message +1ms&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="constructors" tabindex="-1"><a class="header-anchor" href="#constructors"><span>Constructors</span></a></h2><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor"><span>Constructor</span></a></h3><blockquote><p><strong>new Logger</strong>(<code>label</code>?): <code>Logger</code></p></blockquote><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h4><h5 id="label" tabindex="-1"><a class="header-anchor" href="#label"><span>label?</span></a></h5><p><code>string</code></p><p>{string} Prefix label</p><h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h4><p><code>Logger</code></p><h2 id="methods" tabindex="-1"><a class="header-anchor" href="#methods"><span>Methods</span></a></h2><h3 id="debug" tabindex="-1"><a class="header-anchor" href="#debug"><span>debug()</span></a></h3><blockquote><p><strong>debug</strong>(<code>message</code>, ...<code>args</code>): <code>Logger</code></p></blockquote><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1"><span>Parameters</span></a></h4><h5 id="message" tabindex="-1"><a class="header-anchor" href="#message"><span>message</span></a></h5><p><code>string</code></p><p>{string} message</p><h5 id="args" tabindex="-1"><a class="header-anchor" href="#args"><span>args</span></a></h5><p>...<code>any</code>[]</p><p>{...any=} arguments</p><h4 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1"><span>Returns</span></a></h4><p><code>Logger</code></p><h3 id="error" tabindex="-1"><a class="header-anchor" href="#error"><span>error()</span></a></h3><blockquote><p><strong>error</strong>(<code>message</code>, ...<code>args</code>): <code>Logger</code></p></blockquote><h4 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2"><span>Parameters</span></a></h4><h5 id="message-1" tabindex="-1"><a class="header-anchor" href="#message-1"><span>message</span></a></h5><p>{any} message or Error object</p><p><code>string</code> | <code>Error</code></p><h5 id="args-1" tabindex="-1"><a class="header-anchor" href="#args-1"><span>args</span></a></h5><p>...<code>any</code>[]</p><p>{...any=} arguments</p><h4 id="returns-2" tabindex="-1"><a class="header-anchor" href="#returns-2"><span>Returns</span></a></h4><p><code>Logger</code></p><h3 id="info" tabindex="-1"><a class="header-anchor" href="#info"><span>info()</span></a></h3><blockquote><p><strong>info</strong>(<code>message</code>, ...<code>args</code>): <code>Logger</code></p></blockquote><h4 id="parameters-3" tabindex="-1"><a class="header-anchor" href="#parameters-3"><span>Parameters</span></a></h4><h5 id="message-2" tabindex="-1"><a class="header-anchor" href="#message-2"><span>message</span></a></h5><p><code>string</code></p><p>{string} message</p><h5 id="args-2" tabindex="-1"><a class="header-anchor" href="#args-2"><span>args</span></a></h5><p>...<code>any</code>[]</p><p>{...any=} arguments</p><h4 id="returns-3" tabindex="-1"><a class="header-anchor" href="#returns-3"><span>Returns</span></a></h4><p><code>Logger</code></p><h3 id="raw" tabindex="-1"><a class="header-anchor" href="#raw"><span>raw()</span></a></h3><blockquote><p><strong>raw</strong>(<code>message</code>, ...<code>args</code>): <code>Logger</code></p></blockquote><h4 id="parameters-4" tabindex="-1"><a class="header-anchor" href="#parameters-4"><span>Parameters</span></a></h4><h5 id="message-3" tabindex="-1"><a class="header-anchor" href="#message-3"><span>message</span></a></h5><p><code>string</code></p><p>{string} message</p><h5 id="args-3" tabindex="-1"><a class="header-anchor" href="#args-3"><span>args</span></a></h5><p>...<code>any</code>[]</p><p>{...any=} arguments</p><h4 id="returns-4" tabindex="-1"><a class="header-anchor" href="#returns-4"><span>Returns</span></a></h4><p><code>Logger</code></p><h3 id="time" tabindex="-1"><a class="header-anchor" href="#time"><span>time()</span></a></h3><blockquote><p><strong>time</strong>(<code>key</code>, <code>level</code>): <code>Logger</code></p></blockquote><p>Start a timer with a specific key and log level.</p><h4 id="parameters-5" tabindex="-1"><a class="header-anchor" href="#parameters-5"><span>Parameters</span></a></h4><h5 id="key" tabindex="-1"><a class="header-anchor" href="#key"><span>key</span></a></h5><p><code>string</code></p><p>The unique identifier for the timer.</p><h5 id="level" tabindex="-1"><a class="header-anchor" href="#level"><span>level</span></a></h5>`,66)),a("p",null,[r(n,{to:"/doc/logger/type-aliases/Level.html"},{default:o(()=>e[4]||(e[4]=[a("code",null,"Level",-1)])),_:1}),e[5]||(e[5]=s(" = ")),e[6]||(e[6]=a("code",null,"'debug'",-1))]),e[13]||(e[13]=t('<p>The log level for the timer. Defaults to &#39;debug&#39;.</p><h4 id="returns-5" tabindex="-1"><a class="header-anchor" href="#returns-5"><span>Returns</span></a></h4><p><code>Logger</code></p><p>The Logger instance for chaining.</p><h3 id="timeend" tabindex="-1"><a class="header-anchor" href="#timeend"><span>timeEnd()</span></a></h3><blockquote><p><strong>timeEnd</strong>(<code>key</code>, <code>message</code>, ...<code>args</code>): <code>Logger</code></p></blockquote><p>End a timer with a specific key and log the elapsed time.</p><h4 id="parameters-6" tabindex="-1"><a class="header-anchor" href="#parameters-6"><span>Parameters</span></a></h4><h5 id="key-1" tabindex="-1"><a class="header-anchor" href="#key-1"><span>key</span></a></h5><p><code>string</code></p><p>The unique identifier for the timer.</p><h5 id="message-4" tabindex="-1"><a class="header-anchor" href="#message-4"><span>message</span></a></h5><p><code>string</code></p><p>The message to log with the elapsed time.</p><h5 id="args-4" tabindex="-1"><a class="header-anchor" href="#args-4"><span>args</span></a></h5><p>...<code>any</code>[]</p><p>Additional arguments to log with the message.</p><h4 id="returns-6" tabindex="-1"><a class="header-anchor" href="#returns-6"><span>Returns</span></a></h4><p><code>Logger</code></p><p>The Logger instance for chaining.</p><h3 id="warn" tabindex="-1"><a class="header-anchor" href="#warn"><span>warn()</span></a></h3><blockquote><p><strong>warn</strong>(<code>message</code>, ...<code>args</code>): <code>Logger</code></p></blockquote><h4 id="parameters-7" tabindex="-1"><a class="header-anchor" href="#parameters-7"><span>Parameters</span></a></h4><h5 id="message-5" tabindex="-1"><a class="header-anchor" href="#message-5"><span>message</span></a></h5><p><code>string</code></p><p>{string} message</p><h5 id="args-5" tabindex="-1"><a class="header-anchor" href="#args-5"><span>args</span></a></h5><p>...<code>any</code>[]</p><p>{...any=} arguments</p><h4 id="returns-7" tabindex="-1"><a class="header-anchor" href="#returns-7"><span>Returns</span></a></h4><p><code>Logger</code></p><h2 id="properties" tabindex="-1"><a class="header-anchor" href="#properties"><span>Properties</span></a></h2><h3 id="colorfyoutput" tabindex="-1"><a class="header-anchor" href="#colorfyoutput"><span>colorfyOutput</span></a></h3><blockquote><p><strong>colorfyOutput</strong>: <code>boolean</code> = <code>true</code></p></blockquote><h3 id="disabletransport" tabindex="-1"><a class="header-anchor" href="#disabletransport"><span>disableTransport</span></a></h3><blockquote><p><strong>disableTransport</strong>: <code>boolean</code> = <code>false</code></p></blockquote><h3 id="label-1" tabindex="-1"><a class="header-anchor" href="#label-1"><span>label?</span></a></h3><blockquote><p><code>optional</code> <strong>label</strong>: <code>string</code></p></blockquote><h3 id="level-1" tabindex="-1"><a class="header-anchor" href="#level-1"><span>level</span></a></h3>',39)),a("blockquote",null,[a("p",null,[e[8]||(e[8]=a("strong",null,"level",-1)),e[9]||(e[9]=s(": ")),r(n,{to:"/doc/logger/type-aliases/Level.html"},{default:o(()=>e[7]||(e[7]=[a("code",null,"Level",-1)])),_:1}),e[10]||(e[10]=s(" = ")),e[11]||(e[11]=a("code",null,"'debug'",-1))])]),e[14]||(e[14]=t('<h3 id="silent" tabindex="-1"><a class="header-anchor" href="#silent"><span>silent</span></a></h3><blockquote><p><strong>silent</strong>: <code>boolean</code> = <code>false</code></p></blockquote><h3 id="size" tabindex="-1"><a class="header-anchor" href="#size"><span>size</span></a></h3><blockquote><p><strong>size</strong>: <code>number</code> = <code>1000</code></p></blockquote><h3 id="stderr" tabindex="-1"><a class="header-anchor" href="#stderr"><span>stderr()</span></a></h3><blockquote><p><strong>stderr</strong>: (<code>text</code>) =&gt; <code>void</code> = <code>console.error</code></p></blockquote><h4 id="parameters-8" tabindex="-1"><a class="header-anchor" href="#parameters-8"><span>Parameters</span></a></h4><h5 id="text" tabindex="-1"><a class="header-anchor" href="#text"><span>text</span></a></h5><p><code>string</code></p><h4 id="returns-8" tabindex="-1"><a class="header-anchor" href="#returns-8"><span>Returns</span></a></h4><p><code>void</code></p><h3 id="stdout" tabindex="-1"><a class="header-anchor" href="#stdout"><span>stdout()</span></a></h3><blockquote><p><strong>stdout</strong>: (<code>text</code>) =&gt; <code>void</code> = <code>console.log</code></p></blockquote><h4 id="parameters-9" tabindex="-1"><a class="header-anchor" href="#parameters-9"><span>Parameters</span></a></h4><h5 id="text-1" tabindex="-1"><a class="header-anchor" href="#text-1"><span>text</span></a></h5><p><code>string</code></p><h4 id="returns-9" tabindex="-1"><a class="header-anchor" href="#returns-9"><span>Returns</span></a></h4><p><code>void</code></p>',18))])}const m=l(i,[["render",h]]),b=JSON.parse('{"path":"/doc/logger/classes/Logger.html","title":"Class: Logger","lang":"en","frontmatter":{},"headers":[{"level":2,"title":"Example","slug":"example","link":"#example","children":[]},{"level":2,"title":"Constructors","slug":"constructors","link":"#constructors","children":[{"level":3,"title":"Constructor","slug":"constructor","link":"#constructor","children":[]}]},{"level":2,"title":"Methods","slug":"methods","link":"#methods","children":[{"level":3,"title":"debug()","slug":"debug","link":"#debug","children":[]},{"level":3,"title":"error()","slug":"error","link":"#error","children":[]},{"level":3,"title":"info()","slug":"info","link":"#info","children":[]},{"level":3,"title":"raw()","slug":"raw","link":"#raw","children":[]},{"level":3,"title":"time()","slug":"time","link":"#time","children":[]},{"level":3,"title":"timeEnd()","slug":"timeend","link":"#timeend","children":[]},{"level":3,"title":"warn()","slug":"warn","link":"#warn","children":[]}]},{"level":2,"title":"Properties","slug":"properties","link":"#properties","children":[{"level":3,"title":"colorfyOutput","slug":"colorfyoutput","link":"#colorfyoutput","children":[]},{"level":3,"title":"disableTransport","slug":"disabletransport","link":"#disabletransport","children":[]},{"level":3,"title":"label?","slug":"label-1","link":"#label-1","children":[]},{"level":3,"title":"level","slug":"level-1","link":"#level-1","children":[]},{"level":3,"title":"silent","slug":"silent","link":"#silent","children":[]},{"level":3,"title":"size","slug":"size","link":"#size","children":[]},{"level":3,"title":"stderr()","slug":"stderr","link":"#stderr","children":[]},{"level":3,"title":"stdout()","slug":"stdout","link":"#stdout","children":[]}]}],"git":{},"filePathRelative":"doc/logger/classes/Logger.md"}');export{m as comp,b as data};
