import{_ as n,c as a,a as e,o as t}from"./app-BgRJdyqZ.js";const p={};function o(l,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="faasjs-request" tabindex="-1"><a class="header-anchor" href="#faasjs-request"><span>@faasjs/request</span></a></h1><p>FaasJS 内置插件，无需额外安装。</p><p>简化版网络请求插件，主要用于请求接口。</p><h2 id="入参" tabindex="-1"><a class="header-anchor" href="#入参"><span>入参</span></a></h2><ul><li><strong>url</strong> <code>string</code> 请求网址</li><li><strong>options</strong> <code>object</code> 请求配置项 <ul><li><strong>method</strong> <code>string</code> 请求方法，默认为 <code>GET</code></li><li><strong>query</strong> <code>object</code> 请求参数</li><li><strong>headers</strong> <code>object</code> 请求头</li><li><strong>body</strong> <code>any</code> 请求体</li></ul></li></ul><h2 id="出参" tabindex="-1"><a class="header-anchor" href="#出参"><span>出参</span></a></h2><p>注意：出参为 Promise 对象。</p><ul><li><strong>request</strong> <code>object</code> 请求对象</li><li><strong>statusCode</strong> <code>number</code> 状态码</li><li><strong>statusMessage</strong> <code>string</code> 状态信息</li><li><strong>headers</strong> <code>object</code> 响应头</li><li><strong>body</strong> <code>any</code> 响应内容</li></ul><h2 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例"><span>代码示例</span></a></h2><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> request <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@faasjs/request&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">request</span><span class="token punctuation">(</span><span class="token string">&#39;https://google.com&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  query<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    q<span class="token operator">:</span> <span class="token string">&#39;key&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token builtin">console</span><span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token builtin">console</span><span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模拟模式" tabindex="-1"><a class="header-anchor" href="#模拟模式"><span>模拟模式</span></a></h2><p>为了便于单元测试，Request 插件也支持模拟模式，可以拦截请求并返回配置的响应。</p><p>代码示例如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> request<span class="token punctuation">,</span> setMock <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@faasjs/request&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">setMock</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      statusCode<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span></span>
<span class="line">      headers<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      body<span class="token operator">:</span> <span class="token string">&#39;world&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">request</span><span class="token punctuation">(</span><span class="token string">&#39;https://hello.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token builtin">console</span><span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 必定会返回 body 为 world</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="github-地址" tabindex="-1"><a class="header-anchor" href="#github-地址"><span>Github 地址</span></a></h2><p><a href="https://github.com/faasjs/faasjs/tree/main/packages/request" target="_blank" rel="noopener noreferrer">https://github.com/faasjs/faasjs/tree/main/packages/request</a></p>`,16)]))}const i=n(p,[["render",o],["__file","request.html.vue"]]),u=JSON.parse('{"path":"/zh/doc/request.html","title":"@faasjs/request","lang":"zh","frontmatter":{},"headers":[{"level":2,"title":"入参","slug":"入参","link":"#入参","children":[]},{"level":2,"title":"出参","slug":"出参","link":"#出参","children":[]},{"level":2,"title":"代码示例","slug":"代码示例","link":"#代码示例","children":[]},{"level":2,"title":"模拟模式","slug":"模拟模式","link":"#模拟模式","children":[]},{"level":2,"title":"Github 地址","slug":"github-地址","link":"#github-地址","children":[]}],"git":{"updatedTime":1726285816000},"filePathRelative":"zh/doc/request.md"}');export{i as comp,u as data};
